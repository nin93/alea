{"repository_name":"github.com/nin93/alea","body":"# Alea\n\n[![Build Status](https://travis-ci.org/nin93/alea.svg?branch=master)](https://travis-ci.org/nin93/alea)\n\nAlea is a collection of utilities to work with most known probability distributions,\nwritten in pure Crystal.\n\nFeatures:\n  * [Random sampling](#sampling)\n  * [PRNGs implementations](#prngs)\n  * [Cumulative Distribution Functions](#cumulative-distribution-functions)\n\n> **Note**: This project is in early development state and many distributions are\n> still missing, as well as cumulative distribution functions, so keep in mind that\n> breaking changes may occur frequently.\n\n## Why Crystal?\nCrystal compiles to really fast native code without sacrificing any of the modern\nprogramming languages standards providing a nice and clean interface.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n  ```yaml\n  dependencies:\n    alea:\n      github: nin93/alea\n  ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"alea\"\n```\n\n## PRNGs\n\nThe algorithms in use for generating 64-bit uints and floats are from the\n[xoshiro](http://prng.di.unimi.it/) (XOR/shift/rotate) collection, designed by\nSebastiano Vigna and David Blackman: really fast generators promising exquisite\nstatistical properties as well.\n\nImplemented engines:\n  * `XSR128` backed by\n    - *xoroshiro128++* as `#next_u`\n    - *xoroshiro128+* as `#next_f`\n  * `XSR256` backed by\n    - *xoshiro256++* as `#next_u`\n    - *xoshiro256+* as `#next_f`\n\nDigits stand for the storage of their state in bits.\nTheir period is thus `2^128 -1` for `XSR128` and `2^256 -1` for `XSR256`.\n\nThe `+` versions are slightly faster, but since they have a bias on the right-most\nbits, they are only used for generating random floats, which lose those bits while\nshifting to obtain the mantissa.\n\nMore informations are detailed in: http://prng.di.unimi.it/.\n\n> See the [benchmarks](https://github.com/nin93/alea/tree/master/benchmarks) for a\n> comparison between these engines.\n\n## Sampling\n`Random` is the interface provided to perform sampling:\n```crystal\nrandom = Alea::Random.new\nrandom.normal # => -0.36790519967553736\n```\nIt also accepts an initial seed to reproduce the same seemingly random events across runs:\n```crystal\nseed = 9377u64\nrandom = Alea::Random.new(seed)\nrandom.exp # => 2.8445710982736148\n```\nBy default, the PRNG in use by `Random` is `XSR128`. You can, though, pass the desired\nengine as an argument to the constructor. Here is an example using `XSR256`:\n```crystal\nrandom = Alea::Random.new(Alea::XSR256)\nrandom.float # => 0.6533582874035311\nrandom.prng  # => Alea::XSR256\n\n# or seeded as well\nrandom = Alea::Random.new(193, Alea::XSR256)\nrandom.float # => 0.80750616724688\n```\nAll PRNGs in this library inherits from an abstract class `PRNG`; you are then allowed\nto build your own custom PRNG by inheriting the above parent class and passing it to\n`Random` just like in the previous example:\n\n```crystal\nclass MyGenerator < Alea::PRNG\n  def next_u : UInt64\n    # must be implemented\n  end\n\n  def next_f : Float64\n    # must be implemented\n  end\n\n  def jump : self\n    # must be implemented\n  end\n\n  ...\nend\n\nrandom = Alea::Random(MyGenerator)\n```\n\n### Unsafe methods\n\nPlain sampling methods (such as `#normal`, `#gamma`) performs checks over arguments\npassed to prevent bad data generation or inner exceptions.\nIn order to avoid them (checks might be slow) you must use their unsafe version by\nprepending `next_` to them:\n\n```crystal\nrandom = Alea::Random.new\nrandom.normal(loc: 0, sigma: 0)      # raises Alea::UndefinedError: sigma is 0 or negative.\nrandom.next_normal(loc: 0, sigma: 0) # these might raise internal exceptions.\n```\n\nTimings are definitely comparable, though. See the\n[benchmarks](https://github.com/nin93/alea/tree/master/benchmarks)\nfor direct comparisons between those methods.\n\n### Supported Distributions\n\nCurrent sampling methods are implemented for the following distributions:\n  - Beta\n  - Chi-Square\n  - Exponential\n  - Gamma\n  - Laplace\n  - Log-Normal\n  - Normal\n  - Poisson\n  - Uniform\n\n## Cumulative Distribution Functions\n\n`CDF` is the interface used to calculate the Cumulative Distribution Functions.\nGiven *X* ~ *D* and a fixed quantile *x*, CDFs are defined as the functions that\nassociate *x* to the probability that the real-valued random *X* from the\ndistribution *D* will take a value less or equal to *x*.\n\nArguments passed to `CDF` methods to shape the distributions are analogous to\nthose used for sampling:\n\n```crystal\nAlea::CDF.normal(0.0)                       # => 0.5\nAlea::CDF.normal(2.0, loc: 1.0, sigma: 0.5) # => 0.9772498680518208\nAlea::CDF.chisq(5.279, df: 5.0)             # => 0.6172121213841358\n```\n\n### Supported Distributions\n\nCurrent CDFs estimations are implemented for the following distributions:\n  - Chi-Square\n  - Exponential\n  - Gamma\n  - Laplace\n  - Log-Normal\n  - Normal\n  - Poisson\n  - Uniform\n\n## References\nFully listed in [LICENSE.md](https://github.com/nin93/alea/tree/master/LICENSE.md):\n* [NumPy](https://github.com/numpy/numpy) `random` module for pseudo-random sampling methods\n* [JuliaLang](https://github.com/JuliaLang/julia) `random` module for ziggurat methods\n* [IncGammaBeta.jl](https://github.com/jkovacic/IncGammaBeta.jl) for incomplete gamma functions\n\n## Contributing\n\n1. Fork it (<https://github.com/nin93/alea/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Elia Franzella](https://github.com/nin93) - creator and maintainer\n","program":{"html_id":"github.com/nin93/alea/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/nin93/alea","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/nin93/alea/Alea","path":"Alea.html","kind":"module","full_name":"Alea","name":"Alea","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"alea/rand/rgen/prng.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/prng.cr"},{"filename":"alea/rand/rgen/xsr.cr","line_number":4,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr"},{"filename":"alea/internal/ierr.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/ierr.cr"},{"filename":"alea/rand/rnorm.cr","line_number":4,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rnorm.cr"},{"filename":"alea/rand/rexp.cr","line_number":4,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rexp.cr"},{"filename":"alea/rand/rgamma.cr","line_number":5,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgamma.cr"},{"filename":"alea/rand/rbeta.cr","line_number":3,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rbeta.cr"},{"filename":"alea/rand/rchisq.cr","line_number":3,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rchisq.cr"},{"filename":"alea/rand/rinvexp.cr","line_number":3,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rinvexp.cr"},{"filename":"alea/rand/rlaplace.cr","line_number":3,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rlaplace.cr"},{"filename":"alea/rand/rlognor.cr","line_number":4,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rlognor.cr"},{"filename":"alea/rand/rpoiss.cr","line_number":3,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rpoiss.cr"},{"filename":"alea/rand/runif.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/runif.cr"},{"filename":"alea/rand/rwald.cr","line_number":4,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rwald.cr"},{"filename":"alea/rand/random.cr","line_number":3,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/random.cr"},{"filename":"alea/prob/cdf.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/cdf.cr"},{"filename":"alea.cr","line_number":11,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.2.3\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Alea` is a library for generating pseudo-random samples from most known probability distributions,\nwritten in pure Crystal.\n\nAlgorithms in this library are heavily derived from [NumPy](https://github.com/numpy/numpy) and\n[Julia](https://github.com/JuliaLang/julia) lang. Disclaimer in LICENSE file.","summary":"<p><code><a href=\"Alea.html\">Alea</a></code> is a library for generating pseudo-random samples from most known probability distributions, written in pure Crystal.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"param_check(x,op,y,param,caller)-macro","html_id":"param_check(x,op,y,param,caller)-macro","name":"param_check","doc":"Compile-time expansion for dist. definition checks over arguments.\n\n**@parameters**:\n* `{{x}}`: parameter to check through `{{op}}` with `{{y}}`.\n* `{{op}}`: operator that performs the comparison.\n* `{{y}}`: parameter to check through `{{op}}` with `{{x}}`.\n* `{{param}}`: name of the parameter to display in exception messages.\n* `{{caller}}`: name of the method to display in exception messages.\n\n**@exceptions**:\n* `Alea::UndefinedError` if `{{x}}` `{{op}}` `{{y}}` returns `true`.","summary":"<p>Compile-time expansion for dist.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"op","doc":null,"default_value":"","external_name":"op","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""},{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":""},{"name":"caller","doc":null,"default_value":"","external_name":"caller","restriction":""}],"args_string":"(x, op, y, param, caller)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/ierr.cr#L47","def":{"name":"param_check","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"op","doc":null,"default_value":"","external_name":"op","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""},{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":""},{"name":"caller","doc":null,"default_value":"","external_name":"caller","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    if \n{{ x.id }}\n \n{{ op.id }}\n \n{{ y.id }}\n\n      \n# Distribution not defined under these conditions\n\n      raise Alea::UndefinedError.new \\\n        \"Invalid value for `\n{{ caller.id }}\n': \n{{ param.id }}\n = #{\n{{ x.id }}\n} \n{{ op.id }}\n #{\n{{ y.id }}\n}\"\n    \nend\n  \n"}},{"id":"sanity_check(x,param,caller)-macro","html_id":"sanity_check(x,param,caller)-macro","name":"sanity_check","doc":"Compile-time expansion for sanity (NaN/Infinity) checks over arguments.\n\n**@parameters**:\n* `{{x}}`: parameter to check.\n* `{{param}}`: name of the parameter to display in exception messages.\n* `{{caller}}`: name of the method to display in exception messages.\n\n**@exceptions**:\n* `Alea::NaNError` if `{{x}}` is `NaN`.\n* `Alea::InfinityError` if `{{x}}` is `Infinity`.","summary":"<p>Compile-time expansion for sanity (NaN/Infinity) checks over arguments.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":""},{"name":"caller","doc":null,"default_value":"","external_name":"caller","restriction":""}],"args_string":"(x, param, caller)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/ierr.cr#L24","def":{"name":"sanity_check","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":""},{"name":"caller","doc":null,"default_value":"","external_name":"caller","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    if !(\n{{ x.id }}\n == \n{{ x.id }}\n)\n      \n# NaN encountered\n\n      raise Alea::NaNError.new \\\n        \"Invalid value for `\n{{ caller.id }}\n': \n{{ param.id }}\n = #{\n{{ x.id }}\n}\"\n    \nelsif \n{{ x.id }}\n != 0.0 && \n{{ x.id }}\n * 2.0 == \n{{ x.id }}\n\n      \n# Infinity encountered\n\n      raise Alea::InfinityError.new \\\n        \"Invalid value for `\n{{ caller.id }}\n': \n{{ param.id }}\n = #{\n{{ x.id }}\n}\"\n    \nend\n  \n"}}],"types":[{"html_id":"github.com/nin93/alea/Alea/CDF","path":"Alea/CDF.html","kind":"module","full_name":"Alea::CDF","name":"CDF","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"alea/prob/cdf.cr","line_number":16,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/cdf.cr"},{"filename":"alea/prob/pchisq.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/pchisq.cr"},{"filename":"alea/prob/pexp.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/pexp.cr"},{"filename":"alea/prob/pgamma.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/pgamma.cr"},{"filename":"alea/prob/plaplace.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/plaplace.cr"},{"filename":"alea/prob/plognor.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/plognor.cr"},{"filename":"alea/prob/pnorm.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/pnorm.cr"},{"filename":"alea/prob/ppoiss.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/ppoiss.cr"},{"filename":"alea/prob/punif.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/punif.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea","kind":"module","full_name":"Alea","name":"Alea"},"doc":"`Alea::CDF` is the interface used to calculate the Cumulative Distribution Functions.\nGiven *X* ~ *D* and a fixed quantile *x*, CDFs are defined as the functions that associate *x*\nto the probability that the real-valued random *X* from the distribution *D*\nwill take a value less or equal to *x*.\n\nArguments passed to `Alea::CDF` methods to shape the distributions are analogous to those used for sampling:\n\n```crystal\nAlea::CDF.normal(0.0)                       # => 0.5\nAlea::CDF.normal(2.0, loc: 1.0, sigma: 0.5) # => 0.9772498680518208\nAlea::CDF.chisq(5.279, df: 5.0)             # => 0.6172121213841358\n```\n\nNOTE: for real-valued quantiles is used `x`, `k` for discrete-valued instead.","summary":"<p><code><a href=\"../Alea/CDF.html\">Alea::CDF</a></code> is the interface used to calculate the Cumulative Distribution Functions.</p>","class_methods":[{"id":"chisq(x:Float,df:Float=1.0):Float64-class-method","html_id":"chisq(x:Float,df:Float=1.0):Float64-class-method","name":"chisq","doc":"Calculate the cumulative distribution function evaluated at `x`.\n\n**@parameters**:\n* `x`: real-valued quantile of which estimate the cdf.\n* `df`: degrees of freedom of the distribution;\n  usually mentioned as **`k`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `df` is negative or zero.","summary":"<p>Calculate the cumulative distribution function evaluated at <code>x</code>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"df","doc":null,"default_value":"1.0","external_name":"df","restriction":"Float"}],"args_string":"(x : Float, df : Float = <span class=\"n\">1.0</span>) : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/pchisq.cr#L13","def":{"name":"chisq","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"df","doc":null,"default_value":"1.0","external_name":"df","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Alea.sanity_check(x, :x, :chisq)\nAlea.sanity_check(df, :df, :chisq)\nAlea.param_check(df, :<=, 0.0, :df, :chisq)\nx <= 0.0 && (return 0.0)\nAlea::Internal.inc_gamma_regular(df * 0.5, x * 0.5, :lower)\n"}},{"id":"exp(x:Float,scale:Float=1.0):Float64-class-method","html_id":"exp(x:Float,scale:Float=1.0):Float64-class-method","name":"exp","doc":"Calculate the cumulative distribution function evaluated at `x`.\n\n**@parameters**:\n* `x`: real-valued quantile of which estimate the cdf.\n* `scale`: scale parameter of the distribution;\n  usually mentioned as **`λ^-1`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `scale` is negative or zero.","summary":"<p>Calculate the cumulative distribution function evaluated at <code>x</code>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":"Float"}],"args_string":"(x : Float, scale : Float = <span class=\"n\">1.0</span>) : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/pexp.cr#L13","def":{"name":"exp","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Alea.sanity_check(x, :x, :exp)\nAlea.sanity_check(scale, :scale, :exp)\nAlea.param_check(scale, :<=, 0.0, :scale, :exp)\nx <= 0.0 && (return 0.0)\n1.0 - (Math.exp((-x) / scale))\n"}},{"id":"gamma(x:Float,shape:Float,scale:Float=1.0):Float64-class-method","html_id":"gamma(x:Float,shape:Float,scale:Float=1.0):Float64-class-method","name":"gamma","doc":"Calculate the cumulative distribution function evaluated at `x`.\n\n**@parameters**:\n* `x`: real-valued quantile of which estimate the cdf.\n* `shape`: shape parameter of the distribution;\n  usually mentioned as **`k`**.\n* `scale`: scale parameter of the distribution;\n  usually mentioned as **`θ`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if any of `shape` or `scale` is negative or zero.","summary":"<p>Calculate the cumulative distribution function evaluated at <code>x</code>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Float"},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":"Float"}],"args_string":"(x : Float, shape : Float, scale : Float = <span class=\"n\">1.0</span>) : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/pgamma.cr#L15","def":{"name":"gamma","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Float"},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Alea.sanity_check(x, :x, :gamma)\nAlea.sanity_check(shape, :shape, :gamma)\nAlea.sanity_check(scale, :scale, :gamma)\nAlea.param_check(shape, :<=, 0.0, :shape, :gamma)\nAlea.param_check(scale, :<=, 0.0, :scale, :gamma)\nx <= 0.0 && (return 0.0)\nAlea::Internal.inc_gamma_regular(shape, x / scale, :lower)\n"}},{"id":"laplace(x:Float,loc:Float=0.0,scale:Float=1.0):Float64-class-method","html_id":"laplace(x:Float,loc:Float=0.0,scale:Float=1.0):Float64-class-method","name":"laplace","doc":"Calculate the cumulative distribution function evaluated at `x`.\n\n**@parameters**:\n* `x`: real-valued quantile of which estimate the cdf.\n* `loc`: centrality parameter, or mean of the distribution;\n  usually mentioned as **`μ`**.\n* `scale`: scale parameter of the distribution;\n  usually mentioned as **`b`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `scale` is negative or zero.","summary":"<p>Calculate the cumulative distribution function evaluated at <code>x</code>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":"Float"},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":"Float"}],"args_string":"(x : Float, loc : Float = <span class=\"n\">0.0</span>, scale : Float = <span class=\"n\">1.0</span>) : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/plaplace.cr#L15","def":{"name":"laplace","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":"Float"},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Alea.sanity_check(x, :x, :laplace)\nAlea.sanity_check(loc, :loc, :laplace)\nAlea.sanity_check(scale, :scale, :laplace)\nAlea.param_check(scale, :<=, 0.0, :scale, :laplace)\na = (x - loc) / scale\nx < loc && (return 0.5 * (Math.exp(a)))\n1.0 - (0.5 * (Math.exp(-a)))\n"}},{"id":"lognormal(x:Float,loc:Float=0.0,sigma:Float=1.0):Float64-class-method","html_id":"lognormal(x:Float,loc:Float=0.0,sigma:Float=1.0):Float64-class-method","name":"lognormal","doc":"Calculate the cumulative distribution function evaluated at `x`.\n\n**@parameters**:\n* `x`: real-valued quantile of which estimate the cdf.\n* `loc`: centrality parameter, or mean of the underlying normal distribution;\n  usually mentioned as **`μ`**.\n* `sigma`: scale parameter, or standard deviation of the underlying normal distribution;\n  usually mentioned as **`σ`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `sigma` is negative or zero.","summary":"<p>Calculate the cumulative distribution function evaluated at <code>x</code>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":"Float"},{"name":"sigma","doc":null,"default_value":"1.0","external_name":"sigma","restriction":"Float"}],"args_string":"(x : Float, loc : Float = <span class=\"n\">0.0</span>, sigma : Float = <span class=\"n\">1.0</span>) : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/plognor.cr#L15","def":{"name":"lognormal","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":"Float"},{"name":"sigma","doc":null,"default_value":"1.0","external_name":"sigma","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Alea.sanity_check(x, :x, :lognormal)\nAlea.sanity_check(loc, :loc, :lognormal)\nAlea.sanity_check(sigma, :sigma, :lognormal)\nAlea.param_check(sigma, :<=, 0.0, :sigma, :lognormal)\nx <= 0.0 && (return 0.0)\n0.5 + (0.5 * (Math.erf(((Math.log(x)) - loc) / (sigma * 1.4142135623730951))))\n"}},{"id":"normal(x:Float,loc:Float=0.0,sigma:Float=1.0):Float64-class-method","html_id":"normal(x:Float,loc:Float=0.0,sigma:Float=1.0):Float64-class-method","name":"normal","doc":"Calculate the cumulative distribution function evaluated at `x`.\n\n**@parameters**:\n* `x`: real-valued quantile of which estimate the cdf.\n* `loc`: centrality parameter, or mean of the distribution;\n  usually mentioned as **`μ`**.\n* `sigma`: scale parameter, or standard deviation of the distribution;\n  usually mentioned as **`σ`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `sigma` is negative or zero.","summary":"<p>Calculate the cumulative distribution function evaluated at <code>x</code>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":"Float"},{"name":"sigma","doc":null,"default_value":"1.0","external_name":"sigma","restriction":"Float"}],"args_string":"(x : Float, loc : Float = <span class=\"n\">0.0</span>, sigma : Float = <span class=\"n\">1.0</span>) : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/pnorm.cr#L15","def":{"name":"normal","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":"Float"},{"name":"sigma","doc":null,"default_value":"1.0","external_name":"sigma","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Alea.sanity_check(x, :x, :normal)\nAlea.sanity_check(loc, :loc, :normal)\nAlea.sanity_check(sigma, :sigma, :normal)\nAlea.param_check(sigma, :<=, 0.0, :sigma, :normal)\n0.5 * (1.0 + (Math.erf((x - loc) / (sigma * 1.4142135623730951))))\n"}},{"id":"poisson(k:Int,lam:Float=1.0):Float64-class-method","html_id":"poisson(k:Int,lam:Float=1.0):Float64-class-method","name":"poisson","doc":"Calculate the cumulative distribution function evaluated at `k`.\n\n**@parameters**:\n* `k`: discrete-valued quantile of which estimate the cdf.\n* `lam`: separation parameter of the distribution;\n  usually mentioned as **`λ`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `lam` is negative or zero.","summary":"<p>Calculate the cumulative distribution function evaluated at <code>k</code>.</p>","abstract":false,"args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Int"},{"name":"lam","doc":null,"default_value":"1.0","external_name":"lam","restriction":"Float"}],"args_string":"(k : Int, lam : Float = <span class=\"n\">1.0</span>) : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/ppoiss.cr#L13","def":{"name":"poisson","args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Int"},{"name":"lam","doc":null,"default_value":"1.0","external_name":"lam","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Alea.sanity_check(lam, :lam, :poisson)\nAlea.param_check(lam, :<=, 0.0, :lam, :poisson)\nk < 0 && (return 0.0)\nAlea::Internal.inc_gamma_regular(k + 1, lam, :upper)\n"}},{"id":"uniform(x:Float,min:Float,max:Float):Float64-class-method","html_id":"uniform(x:Float,min:Float,max:Float):Float64-class-method","name":"uniform","doc":"Calculate the cumulative distribution function evaluated at `x`.\n\n**@parameters**:\n* `x`: real-valued quantile of which estimate the cdf.\n* `min`: left bound parameter of range of the distribution;\n  usually mentioned as **`a`**.\n* `max`: right bound parameter of range of the distribution;\n  usually mentioned as **`b`**.\n\n**@notes**:\n* *range* is `[min, max)`.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments bound is `NaN`.\n* `Alea::InfinityError` if any of the arguments bound is `Infinity`.\n* `Alea::UndefinedError` if `max` is less than `min`.","summary":"<p>Calculate the cumulative distribution function evaluated at <code>x</code>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Float"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Float"}],"args_string":"(x : Float, min : Float, max : Float) : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/prob/punif.cr#L18","def":{"name":"uniform","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float"},{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Float"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Alea.sanity_check(x, :x, :uniform)\nAlea.sanity_check(min, :min, :uniform)\nAlea.sanity_check(max, :max, :uniform)\nif min < max\nelse\n  raise(Alea::UndefinedError.new(\"Invalid value for `uniform': range = #{min}...#{max}\"))\nend\nx <= min && (return 0.0)\nx >= max && (return 1.0)\n(x - min) / (max - min)\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/nin93/alea/Alea/InfinityError","path":"Alea/InfinityError.html","kind":"class","full_name":"Alea::InfinityError","name":"InfinityError","abstract":false,"superclass":{"html_id":"github.com/nin93/alea/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/nin93/alea/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/nin93/alea/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/nin93/alea/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"alea/internal/ierr.cr","line_number":9,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/ierr.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea","kind":"module","full_name":"Alea","name":"Alea"},"doc":"Exception raised when `Infinity` is passed as argument.","summary":"<p>Exception raised when <code>Infinity</code> is passed as argument.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/nin93/alea/Alea/Internal","path":"Alea/Internal.html","kind":"module","full_name":"Alea::Internal","name":"Internal","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/nin93/alea/Alea/Internal/Ziggurat","kind":"module","full_name":"Alea::Internal::Ziggurat","name":"Ziggurat"}],"locations":[{"filename":"alea/internal/izigg.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/izigg.cr"},{"filename":"alea/internal/igausleg.cr","line_number":1,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/igausleg.cr"},{"filename":"alea/internal/igamma.cr","line_number":3,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/igamma.cr"},{"filename":"alea/internal/ipoiss.cr","line_number":3,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/ipoiss.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"SPECFUN_EPS32","name":"SPECFUN_EPS32","value":"1.0e-06","doc":"Single precision tolerance","summary":"<p>Single precision tolerance</p>"},{"id":"SPECFUN_EPS64","name":"SPECFUN_EPS64","value":"1.0e-15","doc":"Double precision tolerance","summary":"<p>Double precision tolerance</p>"},{"id":"SPECFUN_ITMAX","name":"SPECFUN_ITMAX","value":"1000","doc":"Iteration limit within which `Alea::NoConvergeError` is not raised","summary":"<p>Iteration limit within which <code><a href=\"../Alea/NoConvergeError.html\">Alea::NoConvergeError</a></code> is not raised</p>"}],"included_modules":[{"html_id":"github.com/nin93/alea/Alea/Internal/Ziggurat","kind":"module","full_name":"Alea::Internal::Ziggurat","name":"Ziggurat"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea","kind":"module","full_name":"Alea","name":"Alea"},"doc":null,"summary":null,"class_methods":[{"id":"inc_gamma(a,x,uorl)-class-method","html_id":"inc_gamma(a,x,uorl)-class-method","name":"inc_gamma","doc":"Estimate the Incomplete Gamma Function\n\nWhen `x > (a+1)`, the upper gamma function can be evaluated as\n\n```text\n                -x    a\n               e   * x\n  G(a,x) ~= --------------\n               cf(a,x)\n```\nwhere `cf(a,x)` is the continued fraction defined above, its coefficients\n`a(i)` and `b(i)` are implemented in `#inc_gamma_ctdfr_proc`.\n\nWhen `x < (a+1)`, it is more convenient to apply the following Taylor series\nthat evaluates the lower incomplete gamma function:\n\n```text\n                         inf\n                        -----\n             -x    a    \\        G(a)       i\n  g(a,x) ~= e   * x  *   >    ---------- * x\n                        /      G(a+1+i)\n                        -----\n                         i=0\n```\n\nApplying the following property of the gamma function:\n\n```text\n  G(a+1) = a * G(a)\n```\n\nThe Taylor series above can be further simplified to:\n\n```text\n                         inf\n                        -----              i\n             -x    a    \\                 x\n  g(a,x) ~= e   * x  *   >    -------------------------\n                        /      a * (a+1) * ... * (a+i)\n                        -----\n                         i=0\n```\n\nOnce either a lower or an upper incomplete gamma function is evaluated,\nthe other value may be quickly obtained by applying the following\nproperty of the incomplete gamma function:\n\n```text\n  G(a,x) + g(a,x) = G(a)\n```\n\n**@parameters**:\n* `a`: parameter of the Incomplete Gamma function.\n* `x`: the upper integration limit.\n* `uorl`: symbol to request the `:upper` or `:lower` inc. gamma function.\n\n**@exceptions**:\n* `Alea::NoConvergeError` if no convergence occurs within `SPECFUN_ITMAX` iterations.","summary":"<p>Estimate the Incomplete Gamma Function</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"uorl","doc":null,"default_value":"","external_name":"uorl","restriction":""}],"args_string":"(a, x, uorl)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/igamma.cr#L168","def":{"name":"inc_gamma","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"uorl","doc":null,"default_value":"","external_name":"uorl","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x > (a + 1.0)\n  ginc = self.inc_gamma_upper(a, x)\n  if uorl == (:lower)\n    ginc = (Math.gamma(a)) - ginc\n  end\nelse\n  ginc = self.inc_gamma_lower(a, x)\n  if uorl == (:upper)\n    ginc = (Math.gamma(a)) - ginc\n  end\nend\nginc\n"}},{"id":"inc_gamma_regular(a,x,uorl)-class-method","html_id":"inc_gamma_regular(a,x,uorl)-class-method","name":"inc_gamma_regular","doc":"Estimate the Incomplete Regularized Gamma function.\n\n**@parameters**:\n* `a`: parameter of the Incomplete Gamma function.\n* `x`: the upper integration limit.\n* `uorl`: symbol to request the `:upper` or `:lower` inc. reg. gamma function.\n\n**@references**:\n* `Alea::Internal.inc_gamma`\n\n**@exceptions**:\n* `Alea::NoConvergeError` if no convergence occurs within `SPECFUN_ITMAX` iterations.","summary":"<p>Estimate the Incomplete Regularized Gamma function.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"uorl","doc":null,"default_value":"","external_name":"uorl","restriction":""}],"args_string":"(a, x, uorl)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/igamma.cr#L232","def":{"name":"inc_gamma_regular","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"uorl","doc":null,"default_value":"","external_name":"uorl","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(self.inc_gamma(a, x, uorl)) / (Math.gamma(a))"}},{"id":"incg_regular_lower(a,x)-class-method","html_id":"incg_regular_lower(a,x)-class-method","name":"incg_regular_lower","doc":"Estimate the Incomplete Regular Lower Gamma function.\n\n**@parameters**:\n* `a`: parameter of the Incomplete Gamma function.\n* `x`: the upper integration limit.\n\n**@references**:\n* `Alea::Internal.inc_gamma`\n\n**@exceptions**:\n* `Alea::NoConvergeError` if no convergence occurs within `SPECFUN_ITMAX` iterations.","summary":"<p>Estimate the Incomplete Regular Lower Gamma function.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"args_string":"(a, x)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/igamma.cr#L262","def":{"name":"incg_regular_lower","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(self.inc_gamma(a, x, upper: false)) / (Math.gamma(a))"}},{"id":"incg_regular_upper(a,x)-class-method","html_id":"incg_regular_upper(a,x)-class-method","name":"incg_regular_upper","doc":"Estimate the Incomplete Regular Upper Gamma function.\n\n**@parameters**:\n* `a`: parameter of the Incomplete Gamma function.\n* `x`: the upper integration limit.\n\n**@references**:\n* `Alea::Internal.inc_gamma`\n\n**@exceptions**:\n* `Alea::NoConvergeError` if no convergence occurs within `SPECFUN_ITMAX` iterations.","summary":"<p>Estimate the Incomplete Regular Upper Gamma function.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"args_string":"(a, x)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/igamma.cr#L247","def":{"name":"incg_regular_upper","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(self.inc_gamma(a, x, upper: true)) / (Math.gamma(a))"}},{"id":"poisson_mult(lam:Float|Int,prng:Alea::PRNG)-class-method","html_id":"poisson_mult(lam:Float|Int,prng:Alea::PRNG)-class-method","name":"poisson_mult","doc":"Ok here to pass the prng: it's a reference and\nit will not affect repeatability.","summary":"<p>Ok here to pass the prng: it's a reference and it will not affect repeatability.</p>","abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"Float | Int"},{"name":"prng","doc":null,"default_value":"","external_name":"prng","restriction":"Alea::PRNG"}],"args_string":"(lam : Float | Int, prng : Alea::PRNG)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/ipoiss.cr#L28","def":{"name":"poisson_mult","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"Float | Int"},{"name":"prng","doc":null,"default_value":"","external_name":"prng","restriction":"Alea::PRNG"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"enlam = Math.exp(-lam)\nx = 0_i64\nprod = 1.0\nwhile true\n  u = prng.next_f\n  prod = prod * u\n  (enlam >= prod) && (return x)\n  x = x + 1_i64\nend\n"}},{"id":"poisson_ptrs(lam:Float|Int,prng:Alea::PRNG)-class-method","html_id":"poisson_ptrs(lam:Float|Int,prng:Alea::PRNG)-class-method","name":"poisson_ptrs","doc":"Ok here to pass the prng: it's a reference and\nit will not affect repeatability.","summary":"<p>Ok here to pass the prng: it's a reference and it will not affect repeatability.</p>","abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"Float | Int"},{"name":"prng","doc":null,"default_value":"","external_name":"prng","restriction":"Alea::PRNG"}],"args_string":"(lam : Float | Int, prng : Alea::PRNG)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/ipoiss.cr#L6","def":{"name":"poisson_ptrs","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"Float | Int"},{"name":"prng","doc":null,"default_value":"","external_name":"prng","restriction":"Alea::PRNG"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"slam = Math.sqrt(lam)\nllam = Math.log(lam)\nb = 0.931 + (2.53 * slam)\na = -0.059 + (0.02483 * b)\ninv = 1.1239 + (1.1328 / (b - 3.4))\nvr = 0.9277 - (3.6224 / (b - 2.0))\nwhile true\n  u = prng.next_f - 0.5\n  v = prng.next_f\n  us = 0.5 - u.abs\n  k = Int64.new((((((2.0 * a) / us) + b) * u) + lam) + 0.43)\n  ((us >= 0.07) && (v <= vr)) && (return k)\n  ((k < 0) || ((us < 0.013) && (v > us))) && (next)\n  log = ((Math.log(v)) + (Math.log(inv))) - (Math.log((a / (us * us)) + b))\n  gam = ((-lam) + (k * llam)) - (Math.lgamma(k + 1_i64))\n  (log <= gam) && (return k)\nend\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/nin93/alea/Alea/Internal/GaussLegendre","path":"Alea/Internal/GaussLegendre.html","kind":"module","full_name":"Alea::Internal::GaussLegendre","name":"GaussLegendre","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"alea/internal/igausleg.cr","line_number":2,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/igausleg.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea/Internal","kind":"module","full_name":"Alea::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/nin93/alea/Alea/Internal/GaussLegendre/Quad50","path":"Alea/Internal/GaussLegendre/Quad50.html","kind":"module","full_name":"Alea::Internal::GaussLegendre::Quad50","name":"Quad50","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"alea/internal/igausleg.cr","line_number":18,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/igausleg.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"P","name":"P","value":"StaticArray[-0.03109833832718887611232898966595, 0.03109833832718887611232898966595, -0.09317470156008614085445037763960, 0.09317470156008614085445037763960, -0.15489058999814590207162862094111, 0.15489058999814590207162862094111, -0.21600723687604175684728453261710, 0.21600723687604175684728453261710, -0.27628819377953199032764527852113, 0.27628819377953199032764527852113, -0.33550024541943735683698825729107, 0.33550024541943735683698825729107, -0.39341431189756512739422925382382, 0.39341431189756512739422925382382, -0.44980633497403878914713146777838, 0.44980633497403878914713146777838, -0.50445814490746420165145913184914, 0.50445814490746420165145913184914, -0.55715830451465005431552290962580, 0.55715830451465005431552290962580, -0.60770292718495023918038179639183, 0.60770292718495023918038179639183, -0.65589646568543936078162486400368, 0.65589646568543936078162486400368, -0.70155246870682225108954625788366, 0.70155246870682225108954625788366, -0.74449430222606853826053625268219, 0.74449430222606853826053625268219, -0.78455583290039926390530519634099, 0.78455583290039926390530519634099, -0.82158207085933594835625411087394, 0.82158207085933594835625411087394, -0.85542976942994608461136264393476, 0.85542976942994608461136264393476, -0.88596797952361304863754098246675, 0.88596797952361304863754098246675, -0.91307855665579189308973564277166, 0.91307855665579189308973564277166, -0.93665661894487793378087494727250, 0.93665661894487793378087494727250, -0.95661095524280794299774564415662, 0.95661095524280794299774564415662, -0.97286438510669207371334410460625, 0.97286438510669207371334410460625, -0.98535408404800588230900962563249, 0.98535408404800588230900962563249, -0.99403196943209071258510820042069, 0.99403196943209071258510820042069, -0.99886640442007105018545944497422, 0.99886640442007105018545944497422]","doc":null,"summary":null},{"id":"W","name":"W","value":"StaticArray[0.06217661665534726232103310736061, 0.06217661665534726232103310736061, 0.06193606742068324338408750978083, 0.06193606742068324338408750978083, 0.06145589959031666375640678608392, 0.06145589959031666375640678608392, 0.06073797084177021603175001538481, 0.06073797084177021603175001538481, 0.05978505870426545750957640531259, 0.05978505870426545750957640531259, 0.05860084981322244583512243663085, 0.05860084981322244583512243663085, 0.05718992564772838372302931506599, 0.05718992564772838372302931506599, 0.05555774480621251762356742561227, 0.05555774480621251762356742561227, 0.05371062188899624652345879725566, 0.05371062188899624652345879725566, 0.05165570306958113848990529584010, 0.05165570306958113848990529584010, 0.04940093844946631492124358075143, 0.04940093844946631492124358075143, 0.04695505130394843296563301363499, 0.04695505130394843296563301363499, 0.04432750433880327549202228683039, 0.04432750433880327549202228683039, 0.04152846309014769742241197896407, 0.04152846309014769742241197896407, 0.03856875661258767524477015023639, 0.03856875661258767524477015023639, 0.03545983561514615416073461100098, 0.03545983561514615416073461100098, 0.03221372822357801664816582732300, 0.03221372822357801664816582732300, 0.02884299358053519802990637311323, 0.02884299358053519802990637311323, 0.02536067357001239044019487838544, 0.02536067357001239044019487838544, 0.02178024317012479298159206906269, 0.02178024317012479298159206906269, 0.01811556071348939035125994342235, 0.01811556071348939035125994342235, 0.01438082276148557441937890892732, 0.01438082276148557441937890892732, 0.01059054838365096926356968149924, 0.01059054838365096926356968149924, 0.00675979919574540150277887817799, 0.00675979919574540150277887817799, 0.00290862255315514095840072434286, 0.00290862255315514095840072434286]","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea/Internal/GaussLegendre","kind":"module","full_name":"Alea::Internal::GaussLegendre","name":"GaussLegendre"},"doc":"Value tables for the computation of the regularized incomplete gamma functions","summary":"<p>Value tables for the computation of the regularized incomplete gamma functions</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/nin93/alea/Alea/Internal/Ziggurat","path":"Alea/Internal/Ziggurat.html","kind":"module","full_name":"Alea::Internal::Ziggurat","name":"Ziggurat","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"alea/internal/izigg.cr","line_number":9,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/izigg.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/nin93/alea/Alea/Internal","kind":"module","full_name":"Alea::Internal","name":"Internal"}],"namespace":{"html_id":"github.com/nin93/alea/Alea/Internal","kind":"module","full_name":"Alea::Internal","name":"Internal"},"doc":"The ziggurat tables for generating normal and exponential\ndistributed variables with better statistical properties\n\nThese constants are transcribed from Julia at:\nhttps://github.com/JuliaLang/julia/blob/master/stdlib/Random/src/normal.jl\nCopyright (c) 2009-2019: Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors:\nhttps://github.com/JuliaLang/julia/contributors","summary":"<p>The ziggurat tables for generating normal and exponential distributed variables with better statistical properties</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/nin93/alea/Alea/Internal/Ziggurat/Exp","path":"Alea/Internal/Ziggurat/Exp.html","kind":"module","full_name":"Alea::Internal::Ziggurat::Exp","name":"Exp","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"alea/internal/izigg.cr","line_number":264,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/izigg.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"F","name":"F","value":"StaticArray[1.0000000000000000e+00, 9.3814368086217470e-01, 9.0046992992574648e-01, 8.7170433238120359e-01, 8.4778550062398961e-01, 8.2699329664305032e-01, 8.0842165152300838e-01, 7.9152763697249562e-01, 7.7595685204011555e-01, 7.6146338884989628e-01, 7.4786862198519510e-01, 7.3503809243142348e-01, 7.2286765959357202e-01, 7.1127476080507601e-01, 7.0019265508278816e-01, 6.8956649611707799e-01, 6.7935057226476536e-01, 6.6950631673192473e-01, 6.6000084107899970e-01, 6.5080583341457110e-01, 6.4189671642726609e-01, 6.3325199421436607e-01, 6.2485273870366598e-01, 6.1668218091520766e-01, 6.0872538207962201e-01, 6.0096896636523223e-01, 5.9340090169173343e-01, 5.8601031847726803e-01, 5.7878735860284503e-01, 5.7172304866482582e-01, 5.6480919291240017e-01, 5.5803828226258745e-01, 5.5140341654064129e-01, 5.4489823767243961e-01, 5.3851687200286191e-01, 5.3225388026304332e-01, 5.2610421398361973e-01, 5.2006317736823360e-01, 5.1412639381474856e-01, 5.0828977641064288e-01, 5.0254950184134772e-01, 4.9690198724154955e-01, 4.9134386959403253e-01, 4.8587198734188491e-01, 4.8048336393045421e-01, 4.7517519303737737e-01, 4.6994482528395998e-01, 4.6478975625042618e-01, 4.5970761564213769e-01, 4.5469615747461550e-01, 4.4975325116275500e-01, 4.4487687341454851e-01, 4.4006510084235390e-01, 4.3531610321563657e-01, 4.3062813728845883e-01, 4.2599954114303434e-01, 4.2142872899761658e-01, 4.1691418643300288e-01, 4.1245446599716118e-01, 4.0804818315203240e-01, 4.0369401253053028e-01, 3.9939068447523107e-01, 3.9513698183329016e-01, 3.9093173698479711e-01, 3.8677382908413765e-01, 3.8266218149600983e-01, 3.7859575940958079e-01, 3.7457356761590216e-01, 3.7059464843514600e-01, 3.6665807978151416e-01, 3.6276297335481777e-01, 3.5890847294874978e-01, 3.5509375286678746e-01, 3.5131801643748334e-01, 3.4758049462163698e-01, 3.4388044470450241e-01, 3.4021714906678002e-01, 3.3658991402867761e-01, 3.3299806876180899e-01, 3.2944096426413633e-01, 3.2591797239355619e-01, 3.2242848495608917e-01, 3.1897191284495724e-01, 3.1554768522712895e-01, 3.1215524877417955e-01, 3.0879406693456019e-01, 3.0546361924459026e-01, 3.0216340067569353e-01, 2.9889292101558179e-01, 2.9565170428126120e-01, 2.9243928816189257e-01, 2.8925522348967775e-01, 2.8609907373707683e-01, 2.8297041453878075e-01, 2.7986883323697292e-01, 2.7679392844851736e-01, 2.7374530965280297e-01, 2.7072259679906002e-01, 2.6772541993204479e-01, 2.6475341883506220e-01, 2.6180624268936298e-01, 2.5888354974901623e-01, 2.5598500703041538e-01, 2.5311029001562946e-01, 2.5025908236886230e-01, 2.4743107566532763e-01, 2.4462596913189211e-01, 2.4184346939887721e-01, 2.3908329026244918e-01, 2.3634515245705964e-01, 2.3362878343743335e-01, 2.3093391716962741e-01, 2.2826029393071670e-01, 2.2560766011668407e-01, 2.2297576805812019e-01, 2.2036437584335949e-01, 2.1777324714870053e-01, 2.1520215107537868e-01, 2.1265086199297828e-01, 2.1011915938898826e-01, 2.0760682772422204e-01, 2.0511365629383771e-01, 2.0263943909370902e-01, 2.0018397469191127e-01, 1.9774706610509887e-01, 1.9532852067956322e-01, 1.9292814997677135e-01, 1.9054576966319539e-01, 1.8818119940425432e-01, 1.8583426276219711e-01, 1.8350478709776746e-01, 1.8119260347549629e-01, 1.7889754657247831e-01, 1.7661945459049488e-01, 1.7435816917135349e-01, 1.7211353531532006e-01, 1.6988540130252766e-01, 1.6767361861725019e-01, 1.6547804187493600e-01, 1.6329852875190182e-01, 1.6113493991759203e-01, 1.5898713896931421e-01, 1.5685499236936523e-01, 1.5473836938446808e-01, 1.5263714202744286e-01, 1.5055118500103989e-01, 1.4848037564386679e-01, 1.4642459387834494e-01, 1.4438372216063478e-01, 1.4235764543247220e-01, 1.4034625107486245e-01, 1.3834942886358020e-01, 1.3636707092642886e-01, 1.3439907170221363e-01, 1.3244532790138752e-01, 1.3050573846833077e-01, 1.2858020454522817e-01, 1.2666862943751067e-01, 1.2477091858083096e-01, 1.2288697950954514e-01, 1.2101672182667483e-01, 1.1916005717532768e-01, 1.1731689921155557e-01, 1.1548716357863353e-01, 1.1367076788274431e-01, 1.1186763167005630e-01, 1.1007767640518538e-01, 1.0830082545103380e-01, 1.0653700405000166e-01, 1.0478613930657017e-01, 1.0304816017125772e-01, 1.0132299742595363e-01, 9.9610583670637132e-02, 9.7910853311492199e-02, 9.6223742550432798e-02, 9.4549189376055859e-02, 9.2887133556043541e-02, 9.1237516631040155e-02, 8.9600281910032858e-02, 8.7975374467270218e-02, 8.6362741140756913e-02, 8.4762330532368119e-02, 8.3174093009632383e-02, 8.1597980709237419e-02, 8.0033947542319905e-02, 7.8481949201606421e-02, 7.6941943170480503e-02, 7.5413888734058410e-02, 7.3897746992364746e-02, 7.2393480875708738e-02, 7.0901055162371829e-02, 6.9420436498728755e-02, 6.7951593421936601e-02, 6.6494496385339774e-02, 6.5049117786753749e-02, 6.3615431999807334e-02, 6.2193415408540995e-02, 6.0783046445479633e-02, 5.9384305633420266e-02, 5.7997175631200659e-02, 5.6621641283742877e-02, 5.5257689676697037e-02, 5.3905310196046087e-02, 5.2564494593071692e-02, 5.1235237055126281e-02, 4.9917534282706372e-02, 4.8611385573379497e-02, 4.7316792913181548e-02, 4.6033761076175170e-02, 4.4762297732943282e-02, 4.3502413568888183e-02, 4.2254122413316234e-02, 4.1017441380414819e-02, 3.9792391023374125e-02, 3.8578995503074857e-02, 3.7377282772959361e-02, 3.6187284781931423e-02, 3.5009037697397410e-02, 3.3842582150874330e-02, 3.2687963508959535e-02, 3.1545232172893609e-02, 3.0414443910466604e-02, 2.9295660224637393e-02, 2.8188948763978636e-02, 2.7094383780955800e-02, 2.6012046645134217e-02, 2.4942026419731783e-02, 2.3884420511558171e-02, 2.2839335406385240e-02, 2.1806887504283581e-02, 2.0787204072578117e-02, 1.9780424338009743e-02, 1.8786700744696030e-02, 1.7806200410911362e-02, 1.6839106826039948e-02, 1.5885621839973163e-02, 1.4945968011691148e-02, 1.4020391403181938e-02, 1.3109164931254991e-02, 1.2212592426255381e-02, 1.1331013597834597e-02, 1.0464810181029979e-02, 9.6144136425022099e-03, 8.7803149858089753e-03, 7.9630774380170400e-03, 7.1633531836349839e-03, 6.3819059373191791e-03, 5.6196422072054830e-03, 4.8776559835423923e-03, 4.1572951208337953e-03, 3.4602647778369040e-03, 2.7887987935740761e-03, 2.1459677437189063e-03, 1.5362997803015724e-03, 9.6726928232717454e-04, 4.5413435384149677e-04]","doc":null,"summary":null},{"id":"K","name":"K","value":"StaticArray[3985772928715747_u64, 0_u64, 2742928985168063_u64, 3438700186803720_u64, 3744780257810519_u64, 3914896975372862_u64, 4022625697542797_u64, 4096776410635449_u64, 4150853606149209_u64, 4192001604687416_u64, 4224344877584100_u64, 4250427292531739_u64, 4271901371161553_u64, 4289886428824118_u64, 4305167164135199_u64, 4318309783140431_u64, 4329732973408939_u64, 4339752937704679_u64, 4348612900760388_u64, 4356502988721768_u64, 4363573953227346_u64, 4369946852445019_u64, 4375720012348349_u64, 4380974119031480_u64, 4385776001930298_u64, 4390181484145305_u64, 4394237557465219_u64, 4397984061535398_u64, 4401454994146429_u64, 4404679543790855_u64, 4407682910787985_u64, 4410486965794400_u64, 4413110782053579_u64, 4415571068741702_u64, 4417882526198713_u64, 4420058138987324_u64, 4422109419110771_u64, 4424046609003130_u64, 4425878851844253_u64, 4427614335173867_u64, 4429260412563040_u64, 4430823707156474_u64, 4432310200160197_u64, 4433725306767516_u64, 4435073941555377_u64, 4436360575016073_u64, 4437589282595121_u64, 4438763787369085_u64, 4439887497305302_u64, 4440963537889317_u64, 4441994780778251_u64, 4442983869033584_u64, 4443933239400428_u64, 4444845142028909_u64, 4445721657973833_u64, 4446564714759241_u64, 4447376100252992_u64, 4448157475061632_u64, 4448910383626429_u64, 4449636264176641_u64, 4450336457674983_u64, 4451012215872352_u64, 4451664708573596_u64, 4452295030203006_u64, 4452904205747009_u64, 4453493196141905_u64, 4454062903166142_u64, 4454614173889473_u64, 4455147804725090_u64, 4455664545125434_u64, 4456165100957687_u64, 4456650137590828_u64, 4457120282722585_u64, 4457576128971458_u64, 4458018236256244_u64, 4458447133983072_u64, 4458863323057846_u64, 4459267277740095_u64, 4459659447352585_u64, 4460040257859578_u64, 4460410113325309_u64, 4460769397263133_u64, 4461118473884709_u64, 4461457689257740_u64, 4461787372379910_u64, 4462107836175979_u64, 4462419378424318_u64, 4462722282618581_u64, 4463016818769708_u64, 4463303244152965_u64, 4463581804004300_u64, 4463852732169940_u64, 4464116251712772_u64, 4464372575478779_u64, 4464621906626490_u64, 4464864439122178_u64, 4465100358203283_u64, 4465329840812355_u64, 4465553056003595_u64, 4465770165323938_u64, 4465981323170417_u64, 4466186677125455_u64, 4466386368271562_u64, 4466580531486826_u64, 4466769295722447_u64, 4466952784263502_u64, 4467131114974005_u64, 4467304400527264_u64, 4467472748622447_u64, 4467636262188207_u64, 4467795039574164_u64, 4467949174730938_u64, 4468098757379441_u64, 4468243873170018_u64, 4468384603832024_u64, 4468521027314372_u64, 4468653217917529_u64, 4468781246417427_u64, 4468905180181701_u64, 4469025083278642_u64, 4469141016579233_u64, 4469253037852581_u64, 4469361201855066_u64, 4469465560413473_u64, 4469566162502383_u64, 4469663054316031_u64, 4469756279334881_u64, 4469845878387079_u64, 4469931889704995_u64, 4470014348976986_u64, 4470093289394550_u64, 4470168741694983_u64, 4470240734199651_u64, 4470309292847996_u64, 4470374441227331_u64, 4470436200598525_u64, 4470494589917604_u64, 4470549625853344_u64, 4470601322800852_u64, 4470649692891184_u64, 4470694745996980_u64, 4470736489734115_u64, 4470774929459349_u64, 4470810068263924_u64, 4470841906963074_u64, 4470870444081369_u64, 4470895675833820_u64, 4470917596102651_u64, 4470936196409613_u64, 4470951465883736_u64, 4470963391224345_u64, 4470971956659198_u64, 4470977143897542_u64, 4470978932077903_u64, 4470977297710362_u64, 4470972214613072_u64, 4470963653842746_u64, 4470951583618801_u64, 4470935969240826_u64, 4470916772999008_u64, 4470893954077117_u64, 4470867468447603_u64, 4470837268758337_u64, 4470803304210459_u64, 4470765520426768_u64, 4470723859310028_u64, 4470678258890503_u64, 4470628653161979_u64, 4470574971905457_u64, 4470517140499614_u64, 4470455079717082_u64, 4470388705505446_u64, 4470317928751817_u64, 4470242655029688_u64, 4470162784326668_u64, 4470078210751556_u64, 4469988822219057_u64, 4469894500110287_u64, 4469795118907000_u64, 4469690545797298_u64, 4469580640250319_u64, 4469465253557163_u64, 4469344228335006_u64, 4469217397991048_u64, 4469084586142555_u64, 4468945605988874_u64, 4468800259630802_u64, 4468648337332216_u64, 4468489616718258_u64, 4468323861903708_u64, 4468150822544455_u64, 4467970232804101_u64, 4467781810226787_u64, 4467585254506221_u64, 4467380246139658_u64, 4467166444954116_u64, 4466943488490515_u64, 4466710990229517_u64, 4466468537640690_u64, 4466215690034133_u64, 4465951976190801_u64, 4465676891744454_u64, 4465389896284246_u64, 4465090410142476_u64, 4464777810826750_u64, 4464451429049611_u64, 4464110544301482_u64, 4463754379904174_u64, 4463382097472202_u64, 4462992790697121_u64, 4462585478355952_u64, 4462159096427753_u64, 4461712489182115_u64, 4461244399078943_u64, 4460753455289385_u64, 4460238160612098_u64, 4459696876515553_u64, 4459127805983955_u64, 4458528973779074_u64, 4457898203649721_u64, 4457233091920645_u64, 4456530976767892_u64, 4455788902331217_u64, 4455003576616606_u64, 4454171321891082_u64, 4453288015951104_u64, 4452349022232650_u64, 4451349106194826_u64, 4450282334707461_u64, 4449141954247902_u64, 4447920242480610_u64, 4446608326137820_u64, 4445195955871676_u64, 4443671225661689_u64, 4442020220072462_u64, 4440226566619900_u64, 4438270861888259_u64, 4436129927556551_u64, 4433775834104269_u64, 4431174602388627_u64, 4428284451100006_u64, 4425053392146958_u64, 4421415870372501_u64, 4417287970124083_u64, 4412560416174562_u64, 4407088078325945_u64, 4400673742272493_u64, 4393042098597073_u64, 4383796248451589_u64, 4372341169422858_u64, 4357740343059955_u64, 4338425130125967_u64, 4311541827049176_u64, 4271262897902398_u64, 4203411844498904_u64, 4061213381260384_u64]","doc":null,"summary":null},{"id":"R","name":"R","value":"7.6971174701310497140446280481","doc":null,"summary":null},{"id":"W","name":"W","value":"StaticArray[1.9311480126418366e-15, 1.4178028487910829e-17, 2.3278824993382448e-17, 3.0487830247064320e-17, 3.6665697714474878e-17, 4.2179302189289733e-17, 4.7222561556862764e-17, 5.1911915446217879e-17, 5.6323471083955047e-17, 6.0510082606427647e-17, 6.4510165096727506e-17, 6.8352646803700541e-17, 7.2059939574689050e-17, 7.5649815537392981e-17, 7.9136643961951065e-17, 8.2532235563518929e-17, 8.5846436168850513e-17, 8.9087554865647428e-17, 9.2262679629663719e-17, 9.5377914505292719e-17, 9.8438560874559257e-17, 1.0144925809006294e-16, 1.0441409405585343e-16, 1.0733669323436384e-16, 1.1022028745670189e-16, 1.1306777346479334e-16, 1.1588176009705533e-16, 1.1866460730417886e-16, 1.2141845865694359e-16, 1.2414526862326387e-16, 1.2684682560606153e-16, 1.2952477151912284e-16, 1.3218061851538810e-16, 1.3481576335745444e-16, 1.3743149982367625e-16, 1.4002902946807859e-16, 1.4260947099321287e-16, 1.4517386844829297e-16, 1.4772319842763584e-16, 1.5025837641447456e-16, 1.5278026239101652e-16, 1.5528966581595696e-16, 1.5778735005459581e-16, 1.6027403633350909e-16, 1.6275040728083524e-16, 1.6521711010420076e-16, 1.6767475945078279e-16, 1.7012393998770646e-16, 1.7256520873568226e-16, 1.7499909718432365e-16, 1.7742611321380505e-16, 1.7984674284430714e-16, 1.8226145183195818e-16, 1.8467068712763576e-16, 1.8707487821298258e-16, 1.8947443832625899e-16, 1.9186976558915995e-16, 1.9426124404443042e-16, 1.9664924461299023e-16, 1.9903412597830144e-16, 2.0141623540485899e-16, 2.0379590949693882e-16, 2.0617347490308439e-16, 2.0854924897123771e-16, 2.1092354035891528e-16, 2.1329664960238294e-16, 2.1566886964838970e-16, 2.1804048635167009e-16, 2.2041177894111562e-16, 2.2278302045723950e-16, 2.2515447816331350e-16, 2.2752641393233694e-16, 2.2989908461180186e-16, 2.3227274236804366e-16, 2.3464763501180916e-16, 2.3702400630653389e-16, 2.3940209626069303e-16, 2.4178214140547710e-16, 2.4416437505894123e-16, 2.4654902757768304e-16, 2.4893632659702250e-16, 2.5132649726057970e-16, 2.5371976244007951e-16, 2.5611634294614988e-16, 2.5851645773082391e-16, 2.6092032408240577e-16, 2.6332815781331452e-16, 2.6574017344147618e-16, 2.6815658436579989e-16, 2.7057760303623509e-16, 2.7300344111887955e-16, 2.7543430965657619e-16, 2.7787041922541278e-16, 2.8031198008751431e-16, 2.8275920234049704e-16, 2.8521229606393309e-16, 2.8767147146315804e-16, 2.9013693901073754e-16, 2.9260890958589514e-16, 2.9508759461219033e-16, 2.9757320619372521e-16, 3.0006595725014739e-16, 3.0256606165070789e-16, 3.0507373434762511e-16, 3.0758919150899939e-16, 3.1011265065151543e-16, 3.1264433077316750e-16, 3.1518445248623523e-16, 3.1773323815073683e-16, 3.2029091200858335e-16, 3.2285770031865573e-16, 3.2543383149302610e-16, 3.2801953623454359e-16, 3.3061504767600738e-16, 3.3322060152114841e-16, 3.3583643618764577e-16, 3.3846279295240445e-16, 3.4109991609932597e-16, 3.4374805306980633e-16, 3.4640745461620167e-16, 3.4907837495850680e-16, 3.5176107194449828e-16, 3.5445580721360130e-16, 3.5716284636474652e-16, 3.5988245912849274e-16, 3.6261491954370031e-16, 3.6536050613905045e-16, 3.6811950211971757e-16, 3.7089219555951389e-16, 3.7367887959883854e-16, 3.7647985264877841e-16, 3.7929541860172334e-16, 3.8212588704887531e-16, 3.8497157350504876e-16, 3.8783279964117988e-16, 3.9070989352498183e-16, 3.9360318987020748e-16, 3.9651303029500381e-16, 3.9943976358986842e-16, 4.0238374599574693e-16, 4.0534534149283966e-16, 4.0832492210071775e-16, 4.1132286819038357e-16, 4.1433956880894741e-16, 4.1737542201763194e-16, 4.2043083524385856e-16, 4.2350622564821518e-16, 4.2660202050715582e-16, 4.2971865761233266e-16, 4.3285658568752094e-16, 4.3601626482415681e-16, 4.3919816693657415e-16, 4.4240277623809919e-16, 4.4563058973923611e-16, 4.4888211776926172e-16, 4.5215788452263475e-16, 4.5545842863172421e-16, 4.5878430376746227e-16, 4.6213607926964266e-16, 4.6551434080870692e-16, 4.6891969108099157e-16, 4.7235275053955480e-16, 4.7581415816285534e-16, 4.7930457226372470e-16, 4.8282467134125866e-16, 4.8637515497845119e-16, 4.8995674478861404e-16, 4.9357018541385775e-16, 4.9721624557917034e-16, 5.0089571920591141e-16, 5.0460942658884340e-16, 5.0835821564116245e-16, 5.1214296321235415e-16, 5.1596457648410618e-16, 5.1982399444994938e-16, 5.2372218948478484e-16, 5.2766016901098856e-16, 5.3163897726836902e-16, 5.3565969719590503e-16, 5.3972345243389779e-16, 5.4383140945596370e-16, 5.4798477984116296e-16, 5.5218482269752343e-16, 5.5643284724928722e-16, 5.6073021560139669e-16, 5.6507834569605064e-16, 5.6947871447763482e-16, 5.7393286128396354e-16, 5.7844239148359912e-16, 5.8300898038105864e-16, 5.8763437741400573e-16, 5.9232041066909314e-16, 5.9706899174600906e-16, 6.0188212100252363e-16, 6.0676189321700068e-16, 6.1171050370897217e-16, 6.1673025496306200e-16, 6.2182356380685327e-16, 6.2699296919933262e-16, 6.3224114069342115e-16, 6.3757088764394262e-16, 6.4298516924135947e-16, 6.4848710546189033e-16, 6.5407998903644809e-16, 6.5976729855445663e-16, 6.6555271283433428e-16, 6.7144012671064882e-16, 6.7743366840910103e-16, 6.8353771870512740e-16, 6.8975693209068478e-16, 6.9609626020748846e-16, 7.0256097784459588e-16, 7.0915671184495837e-16, 7.1588947332085531e-16, 7.2276569364381212e-16, 7.2979226475290851e-16, 7.3697658441912426e-16, 7.4432660721604146e-16, 7.5185090208325131e-16, 7.5955871753377488e-16, 7.6746005575784274e-16, 7.7556575712157906e-16, 7.8388759686228577e-16, 7.9243839615735500e-16, 8.0123215021130834e-16, 8.1028417659131464e-16, 8.1961128778061250e-16, 8.2923199285818092e-16, 8.3916673441467979e-16, 8.4943816836487701e-16, 8.6007149633349414e-16, 8.7109486293879040e-16, 8.8253983380721398e-16, 8.9444197485198646e-16, 9.0684155971316690e-16, 9.1978444098118649e-16, 9.3332313294229516e-16, 9.4751817065249841e-16, 9.6243983456584759e-16, 9.7817036547844198e-16, 9.9480684723838795e-16, 1.0124650144288319e-15, 1.0312843657756166e-15, 1.0514351604044550e-15, 1.0731281954224043e-15, 1.0966288068517408e-15, 1.1222774909350319e-15, 1.1505212963006663e-15, 1.1819635283304206e-15, 1.2174462832361815e-15, 1.2581958069755114e-15, 1.3060984107128082e-15, 1.3642786158057857e-15, 1.4384889932178723e-15, 1.5412190700064194e-15, 1.7091034077168055e-15]","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea/Internal/Ziggurat","kind":"module","full_name":"Alea::Internal::Ziggurat","name":"Ziggurat"},"doc":"Tables for exponential variates","summary":"<p>Tables for exponential variates</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/nin93/alea/Alea/Internal/Ziggurat/Normal","path":"Alea/Internal/Ziggurat/Normal.html","kind":"module","full_name":"Alea::Internal::Ziggurat::Normal","name":"Normal","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"alea/internal/izigg.cr","line_number":11,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/izigg.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"F","name":"F","value":"StaticArray[1.0000000000000000e+00, 9.7710170126767082e-01, 9.5987909180010600e-01, 9.4519895344229909e-01, 9.3206007595922991e-01, 9.1999150503934646e-01, 9.0872644005213032e-01, 8.9809592189834297e-01, 8.8798466075583282e-01, 8.7830965580891684e-01, 8.6900868803685649e-01, 8.6003362119633109e-01, 8.5134625845867751e-01, 8.4291565311220373e-01, 8.3471629298688299e-01, 8.2672683394622093e-01, 8.1892919160370192e-01, 8.1130787431265572e-01, 8.0384948317096383e-01, 7.9654233042295841e-01, 7.8937614356602404e-01, 7.8234183265480195e-01, 7.7543130498118662e-01, 7.6863731579848571e-01, 7.6195334683679483e-01, 7.5537350650709567e-01, 7.4889244721915638e-01, 7.4250529634015061e-01, 7.3620759812686210e-01, 7.2999526456147568e-01, 7.2386453346862967e-01, 7.1781193263072152e-01, 7.1183424887824798e-01, 7.0592850133275376e-01, 7.0009191813651117e-01, 6.9432191612611627e-01, 6.8861608300467136e-01, 6.8297216164499430e-01, 6.7738803621877308e-01, 6.7186171989708166e-01, 6.6639134390874977e-01, 6.6097514777666277e-01, 6.5561147057969693e-01, 6.5029874311081637e-01, 6.4503548082082196e-01, 6.3982027745305614e-01, 6.3465179928762327e-01, 6.2952877992483625e-01, 6.2445001554702606e-01, 6.1941436060583399e-01, 6.1442072388891344e-01, 6.0946806492577310e-01, 6.0455539069746733e-01, 5.9968175261912482e-01, 5.9484624376798689e-01, 5.9004799633282545e-01, 5.8528617926337090e-01, 5.8055999610079034e-01, 5.7586868297235316e-01, 5.7121150673525267e-01, 5.6658776325616389e-01, 5.6199677581452390e-01, 5.5743789361876550e-01, 5.5291049042583185e-01, 5.4841396325526537e-01, 5.4394773119002582e-01, 5.3951123425695158e-01, 5.3510393238045717e-01, 5.3072530440366150e-01, 5.2637484717168403e-01, 5.2205207467232140e-01, 5.1775651722975591e-01, 5.1348772074732651e-01, 5.0924524599574761e-01, 5.0502866794346790e-01, 5.0083757512614835e-01, 4.9667156905248933e-01, 4.9253026364386815e-01, 4.8841328470545758e-01, 4.8432026942668288e-01, 4.8025086590904642e-01, 4.7620473271950547e-01, 4.7218153846772976e-01, 4.6818096140569321e-01, 4.6420268904817391e-01, 4.6024641781284248e-01, 4.5631185267871610e-01, 4.5239870686184824e-01, 4.4850670150720273e-01, 4.4463556539573912e-01, 4.4078503466580377e-01, 4.3695485254798533e-01, 4.3314476911265209e-01, 4.2935454102944126e-01, 4.2558393133802180e-01, 4.2183270922949573e-01, 4.1810064983784795e-01, 4.1438753404089090e-01, 4.1069314827018799e-01, 4.0701728432947315e-01, 4.0335973922111429e-01, 3.9972031498019700e-01, 3.9609881851583223e-01, 3.9249506145931540e-01, 3.8890886001878855e-01, 3.8534003484007706e-01, 3.8178841087339344e-01, 3.7825381724561896e-01, 3.7473608713789086e-01, 3.7123505766823922e-01, 3.6775056977903225e-01, 3.6428246812900372e-01, 3.6083060098964775e-01, 3.5739482014578022e-01, 3.5397498080007656e-01, 3.5057094148140588e-01, 3.4718256395679348e-01, 3.4380971314685055e-01, 3.4045225704452164e-01, 3.3711006663700588e-01, 3.3378301583071823e-01, 3.3047098137916342e-01, 3.2717384281360129e-01, 3.2389148237639104e-01, 3.2062378495690530e-01, 3.1737063802991350e-01, 3.1413193159633707e-01, 3.1090755812628634e-01, 3.0769741250429189e-01, 3.0450139197664983e-01, 3.0131939610080288e-01, 2.9815132669668531e-01, 2.9499708779996164e-01, 2.9185658561709499e-01, 2.8872972848218270e-01, 2.8561642681550159e-01, 2.8251659308370741e-01, 2.7943014176163772e-01, 2.7635698929566810e-01, 2.7329705406857691e-01, 2.7025025636587519e-01, 2.6721651834356114e-01, 2.6419576399726080e-01, 2.6118791913272082e-01, 2.5819291133761890e-01, 2.5521066995466168e-01, 2.5224112605594190e-01, 2.4928421241852824e-01, 2.4633986350126363e-01, 2.4340801542275012e-01, 2.4048860594050039e-01, 2.3758157443123795e-01, 2.3468686187232990e-01, 2.3180441082433859e-01, 2.2893416541468023e-01, 2.2607607132238020e-01, 2.2323007576391746e-01, 2.2039612748015194e-01, 2.1757417672433113e-01, 2.1476417525117358e-01, 2.1196607630703015e-01, 2.0917983462112499e-01, 2.0640540639788071e-01, 2.0364274931033485e-01, 2.0089182249465656e-01, 1.9815258654577511e-01, 1.9542500351413428e-01, 1.9270903690358912e-01, 1.9000465167046496e-01, 1.8731181422380025e-01, 1.8463049242679927e-01, 1.8196065559952254e-01, 1.7930227452284767e-01, 1.7665532144373500e-01, 1.7401977008183875e-01, 1.7139559563750595e-01, 1.6878277480121151e-01, 1.6618128576448205e-01, 1.6359110823236570e-01, 1.6101222343751107e-01, 1.5844461415592431e-01, 1.5588826472447920e-01, 1.5334316106026283e-01, 1.5080929068184568e-01, 1.4828664273257453e-01, 1.4577520800599403e-01, 1.4327497897351341e-01, 1.4078594981444470e-01, 1.3830811644855071e-01, 1.3584147657125373e-01, 1.3338602969166913e-01, 1.3094177717364430e-01, 1.2850872227999952e-01, 1.2608687022018586e-01, 1.2367622820159654e-01, 1.2127680548479021e-01, 1.1888861344290998e-01, 1.1651166562561080e-01, 1.1414597782783835e-01, 1.1179156816383801e-01, 1.0944845714681163e-01, 1.0711666777468364e-01, 1.0479622562248690e-01, 1.0248715894193508e-01, 1.0018949876880981e-01, 9.7903279038862284e-02, 9.5628536713008819e-02, 9.3365311912690860e-02, 9.1113648066373634e-02, 8.8873592068275789e-02, 8.6645194450557961e-02, 8.4428509570353374e-02, 8.2223595813202863e-02, 8.0030515814663056e-02, 7.7849336702096039e-02, 7.5680130358927067e-02, 7.3522973713981268e-02, 7.1377949058890375e-02, 6.9245144397006769e-02, 6.7124653827788497e-02, 6.5016577971242842e-02, 6.2921024437758113e-02, 6.0838108349539864e-02, 5.8767952920933758e-02, 5.6710690106202902e-02, 5.4666461324888914e-02, 5.2635418276792176e-02, 5.0617723860947761e-02, 4.8613553215868521e-02, 4.6623094901930368e-02, 4.4646552251294443e-02, 4.2684144916474431e-02, 4.0736110655940933e-02, 3.8802707404526113e-02, 3.6884215688567284e-02, 3.4980941461716084e-02, 3.3093219458578522e-02, 3.1221417191920245e-02, 2.9365939758133314e-02, 2.7527235669603082e-02, 2.5705804008548896e-02, 2.3902203305795882e-02, 2.2117062707308864e-02, 2.0351096230044517e-02, 1.8605121275724643e-02, 1.6880083152543166e-02, 1.5177088307935325e-02, 1.3497450601739880e-02, 1.1842757857907888e-02, 1.0214971439701471e-02, 8.6165827693987316e-03, 7.0508754713732268e-03, 5.5224032992509968e-03, 4.0379725933630305e-03, 2.6090727461021627e-03, 1.2602859304985975e-03]","doc":null,"summary":null},{"id":"K","name":"K","value":"StaticArray[2104047571236786_u64, 0_u64, 1693657211986787_u64, 1919380038271141_u64, 2015384402196343_u64, 2068365869448128_u64, 2101878624052573_u64, 2124958784102998_u64, 2141808670795147_u64, 2154644611568301_u64, 2164744887587275_u64, 2172897953696594_u64, 2179616279372365_u64, 2185247251868649_u64, 2190034623107822_u64, 2194154434521197_u64, 2197736978774660_u64, 2200880740891961_u64, 2203661538010620_u64, 2206138681109102_u64, 2208359231806599_u64, 2210361007258210_u64, 2212174742388539_u64, 2213825672704646_u64, 2215334711002614_u64, 2216719334487595_u64, 2217994262139172_u64, 2219171977965032_u64, 2220263139538712_u64, 2221276900117330_u64, 2222221164932930_u64, 2223102796829069_u64, 2223927782546658_u64, 2224701368170060_u64, 2225428170204312_u64, 2226112267248242_u64, 2226757276105256_u64, 2227366415328399_u64, 2227942558554684_u64, 2228488279492521_u64, 2229005890047222_u64, 2229497472775193_u64, 2229964908627060_u64, 2230409900758597_u64, 2230833995044585_u64, 2231238597816133_u64, 2231624991250191_u64, 2231994346765928_u64, 2232347736722750_u64, 2232686144665934_u64, 2233010474325959_u64, 2233321557544881_u64, 2233620161276071_u64, 2233906993781271_u64, 2234182710130335_u64, 2234447917093496_u64, 2234703177503020_u64, 2234949014150181_u64, 2235185913274316_u64, 2235414327692884_u64, 2235634679614920_u64, 2235847363174595_u64, 2236052746716837_u64, 2236251174862869_u64, 2236442970379967_u64, 2236628435876762_u64, 2236807855342765_u64, 2236981495548562_u64, 2237149607321147_u64, 2237312426707209_u64, 2237470176035652_u64, 2237623064889403_u64, 2237771290995388_u64, 2237915041040597_u64, 2238054491421305_u64, 2238189808931712_u64, 2238321151397660_u64, 2238448668260432_u64, 2238572501115169_u64, 2238692784207942_u64, 2238809644895133_u64, 2238923204068402_u64, 2239033576548190_u64, 2239140871448443_u64, 2239245192514958_u64, 2239346638439541_u64, 2239445303151952_u64, 2239541276091442_u64, 2239634642459498_u64, 2239725483455293_u64, 2239813876495186_u64, 2239899895417494_u64, 2239983610673676_u64, 2240065089506935_u64, 2240144396119183_u64, 2240221591827230_u64, 2240296735208969_u64, 2240369882240293_u64, 2240441086423386_u64, 2240510398907004_u64, 2240577868599305_u64, 2240643542273726_u64, 2240707464668391_u64, 2240769678579486_u64, 2240830224948980_u64, 2240889142947082_u64, 2240946470049769_u64, 2241002242111691_u64, 2241056493434746_u64, 2241109256832602_u64, 2241160563691400_u64, 2241210444026879_u64, 2241258926538122_u64, 2241306038658137_u64, 2241351806601435_u64, 2241396255408788_u64, 2241439408989313_u64, 2241481290160038_u64, 2241521920683062_u64, 2241561321300462_u64, 2241599511767028_u64, 2241636510880960_u64, 2241672336512612_u64, 2241707005631362_u64, 2241740534330713_u64, 2241772937851689_u64, 2241804230604585_u64, 2241834426189161_u64, 2241863537413311_u64, 2241891576310281_u64, 2241918554154466_u64, 2241944481475843_u64, 2241969368073071_u64, 2241993223025298_u64, 2242016054702685_u64, 2242037870775710_u64, 2242058678223225_u64, 2242078483339331_u64, 2242097291739040_u64, 2242115108362774_u64, 2242131937479672_u64, 2242147782689725_u64, 2242162646924736_u64, 2242176532448092_u64, 2242189440853337_u64, 2242201373061537_u64, 2242212329317416_u64, 2242222309184237_u64, 2242231311537397_u64, 2242239334556717_u64, 2242246375717369_u64, 2242252431779415_u64, 2242257498775893_u64, 2242261571999416_u64, 2242264645987196_u64, 2242266714504453_u64, 2242267770526109_u64, 2242267806216711_u64, 2242266812908462_u64, 2242264781077289_u64, 2242261700316818_u64, 2242257559310145_u64, 2242252345799276_u64, 2242246046552082_u64, 2242238647326615_u64, 2242230132832625_u64, 2242220486690076_u64, 2242209691384458_u64, 2242197728218684_u64, 2242184577261310_u64, 2242170217290819_u64, 2242154625735679_u64, 2242137778609839_u64, 2242119650443327_u64, 2242100214207556_u64, 2242079441234906_u64, 2242057301132135_u64, 2242033761687079_u64, 2242008788768107_u64, 2241982346215682_u64, 2241954395725356_u64, 2241924896721443_u64, 2241893806220517_u64, 2241861078683830_u64, 2241826665857598_u64, 2241790516600041_u64, 2241752576693881_u64, 2241712788642916_u64, 2241671091451078_u64, 2241627420382235_u64, 2241581706698773_u64, 2241533877376767_u64, 2241483854795281_u64, 2241431556397035_u64, 2241376894317345_u64, 2241319774977817_u64, 2241260098640860_u64, 2241197758920538_u64, 2241132642244704_u64, 2241064627262652_u64, 2240993584191742_u64, 2240919374095536_u64, 2240841848084890_u64, 2240760846432232_u64, 2240676197587784_u64, 2240587717084782_u64, 2240495206318753_u64, 2240398451183567_u64, 2240297220544165_u64, 2240191264522612_u64, 2240080312570155_u64, 2239964071293331_u64, 2239842221996530_u64, 2239714417896699_u64, 2239580280957725_u64, 2239439398282193_u64, 2239291317986196_u64, 2239135544468203_u64, 2238971532964979_u64, 2238798683265269_u64, 2238616332424351_u64, 2238423746288095_u64, 2238220109591890_u64, 2238004514345216_u64, 2237775946143212_u64, 2237533267957822_u64, 2237275200846753_u64, 2237000300869952_u64, 2236706931309099_u64, 2236393229029147_u64, 2236057063479501_u64, 2235695986373246_u64, 2235307169458859_u64, 2234887326941578_u64, 2234432617919447_u64, 2233938522519765_u64, 2233399683022677_u64, 2232809697779198_u64, 2232160850599817_u64, 2231443750584641_u64, 2230646845562170_u64, 2229755753817986_u64, 2228752329126533_u64, 2227613325162504_u64, 2226308442121174_u64, 2224797391720399_u64, 2223025347823832_u64, 2220915633329809_u64, 2218357446087030_u64, 2215184158448668_u64, 2211132412537369_u64, 2205758503851065_u64, 2198248265654987_u64, 2186916352102141_u64, 2167562552481814_u64, 2125549880839716_u64]","doc":null,"summary":null},{"id":"R","name":"R","value":"3.6541528853610087963519472518","doc":null,"summary":null},{"id":"RINV","name":"RINV","value":"0.27366123732975827203338247596","doc":"1.0 / R","summary":"<ol><li>0 / R</li></ol>"},{"id":"W","name":"W","value":"StaticArray[1.7367254121602630e-15, 9.5586603514556339e-17, 1.2708704834810623e-16, 1.4909740962495474e-16, 1.6658733631586268e-16, 1.8136120810119029e-16, 1.9429720153135588e-16, 2.0589500628482093e-16, 2.1646860576895422e-16, 2.2622940392218116e-16, 2.3532718914045892e-16, 2.4387234557428771e-16, 2.5194879829274225e-16, 2.5962199772528103e-16, 2.6694407473648285e-16, 2.7395729685142446e-16, 2.8069646002484804e-16, 2.8719058904113930e-16, 2.9346417484728883e-16, 2.9953809336782113e-16, 3.0543030007192440e-16, 3.1115636338921572e-16, 3.1672988018581815e-16, 3.2216280350549905e-16, 3.2746570407939751e-16, 3.3264798116841710e-16, 3.3771803417353232e-16, 3.4268340353119356e-16, 3.4755088731729758e-16, 3.5232663846002031e-16, 3.5701624633953494e-16, 3.6162480571598339e-16, 3.6615697529653540e-16, 3.7061702777236077e-16, 3.7500889278747798e-16, 3.7933619401549554e-16, 3.8360228129677279e-16, 3.8781025861250247e-16, 3.9196300853257678e-16, 3.9606321366256378e-16, 4.0011337552546690e-16, 4.0411583124143332e-16, 4.0807276830960448e-16, 4.1198623774807442e-16, 4.1585816580828064e-16, 4.1969036444740733e-16, 4.2348454071520708e-16, 4.2724230518899761e-16, 4.3096517957162941e-16, 4.3465460355128760e-16, 4.3831194100854571e-16, 4.4193848564470665e-16, 4.4553546609579137e-16, 4.4910405058828750e-16, 4.5264535118571397e-16, 4.5616042766900381e-16, 4.5965029108849407e-16, 4.6311590702081647e-16, 4.6655819856008752e-16, 4.6997804906941950e-16, 4.7337630471583237e-16, 4.7675377680908526e-16, 4.8011124396270155e-16, 4.8344945409350080e-16, 4.8676912627422087e-16, 4.9007095245229938e-16, 4.9335559904654139e-16, 4.9662370843221783e-16, 4.9987590032409088e-16, 5.0311277306593187e-16, 5.0633490483427195e-16, 5.0954285476338923e-16, 5.1273716399787966e-16, 5.1591835667857364e-16, 5.1908694086703434e-16, 5.2224340941340417e-16, 5.2538824077194543e-16, 5.2852189976823820e-16, 5.3164483832166176e-16, 5.3475749612647295e-16, 5.3786030129452348e-16, 5.4095367096239933e-16, 5.4403801186554671e-16, 5.4711372088173611e-16, 5.5018118554603362e-16, 5.5324078453927836e-16, 5.5629288815190902e-16, 5.5933785872484621e-16, 5.6237605106900435e-16, 5.6540781286489604e-16, 5.6843348504368141e-16, 5.7145340215092040e-16, 5.7446789269419609e-16, 5.7747727947569648e-16, 5.8048187991076857e-16, 5.8348200633338921e-16, 5.8647796628943653e-16, 5.8947006281858718e-16, 5.9245859472561339e-16, 5.9544385684180598e-16, 5.9842614027720281e-16, 6.0140573266426640e-16, 6.0438291839361250e-16, 6.0735797884236057e-16, 6.1033119259564394e-16, 6.1330283566179110e-16, 6.1627318168165963e-16, 6.1924250213258470e-16, 6.2221106652737879e-16, 6.2517914260879998e-16, 6.2814699653988953e-16, 6.3111489309056042e-16, 6.3408309582080600e-16, 6.3705186726088149e-16, 6.4002146908880247e-16, 6.4299216230548961e-16, 6.4596420740788321e-16, 6.4893786456033965e-16, 6.5191339376461587e-16, 6.5489105502874154e-16, 6.5787110853507413e-16, 6.6085381480782587e-16, 6.6383943488035057e-16, 6.6682823046247459e-16, 6.6982046410815579e-16, 6.7281639938375311e-16, 6.7581630103719006e-16, 6.7882043516829803e-16, 6.8182906940062540e-16, 6.8484247305500383e-16, 6.8786091732516637e-16, 6.9088467545571690e-16, 6.9391402292275690e-16, 6.9694923761748294e-16, 6.9999060003307640e-16, 7.0303839345521508e-16, 7.0609290415654822e-16, 7.0915442159548734e-16, 7.1222323861967788e-16, 7.1529965167453030e-16, 7.1838396101720629e-16, 7.2147647093647067e-16, 7.2457748997883870e-16, 7.2768733118146927e-16, 7.3080631231227429e-16, 7.3393475611774048e-16, 7.3707299057898310e-16, 7.4022134917657997e-16, 7.4338017116476479e-16, 7.4654980185558890e-16, 7.4973059291369793e-16, 7.5292290266240584e-16, 7.5612709640179217e-16, 7.5934354673958895e-16, 7.6257263393567558e-16, 7.6581474626104873e-16, 7.6907028037219191e-16, 7.7233964170182985e-16, 7.7562324486711744e-16, 7.7892151409638524e-16, 7.8223488367564108e-16, 7.8556379841610841e-16, 7.8890871414417552e-16, 7.9227009821522709e-16, 7.9564843005293662e-16, 7.9904420171571300e-16, 8.0245791849212591e-16, 8.0589009952726568e-16, 8.0934127848215009e-16, 8.1281200422845008e-16, 8.1630284158098775e-16, 8.1981437207065329e-16, 8.2334719476060504e-16, 8.2690192710884700e-16, 8.3047920588053737e-16, 8.3407968811366288e-16, 8.3770405214202216e-16, 8.4135299867980282e-16, 8.4502725197240968e-16, 8.4872756101861549e-16, 8.5245470086955962e-16, 8.5620947401062333e-16, 8.5999271183276646e-16, 8.6380527620052589e-16, 8.6764806112455816e-16, 8.7152199454736980e-16, 8.7542804025171749e-16, 8.7936719990210427e-16, 8.8334051523084080e-16, 8.8734907038131345e-16, 8.9139399442240861e-16, 8.9547646404950677e-16, 8.9959770648910994e-16, 9.0375900262601175e-16, 9.0796169037400680e-16, 9.1220716831348461e-16, 9.1649689962191353e-16, 9.2083241632623076e-16, 9.2521532390956933e-16, 9.2964730630864167e-16, 9.3413013134252651e-16, 9.3866565661866598e-16, 9.4325583596767065e-16, 9.4790272646517382e-16, 9.5260849610662787e-16, 9.5737543220974496e-16, 9.6220595062948384e-16, 9.6710260588230542e-16, 9.7206810229016259e-16, 9.7710530627072088e-16, 9.8221725991905411e-16, 9.8740719604806711e-16, 9.9267855488079765e-16, 9.9803500261836449e-16, 1.0034804521436181e-15, 1.0090190861637457e-15, 1.0146553831467086e-15, 1.0203941464683124e-15, 1.0262405372613567e-15, 1.0322001115486456e-15, 1.0382788623515399e-15, 1.0444832676000471e-15, 1.0508203448355195e-15, 1.0572977139009890e-15, 1.0639236690676801e-15, 1.0707072623632994e-15, 1.0776584002668106e-15, 1.0847879564403425e-15, 1.0921079038149563e-15, 1.0996314701785628e-15, 1.1073733224935752e-15, 1.1153497865853155e-15, 1.1235791107110833e-15, 1.1320817840164846e-15, 1.1408809242582780e-15, 1.1500027537839792e-15, 1.1594771891449189e-15, 1.1693385786910960e-15, 1.1796266352955801e-15, 1.1903876299282890e-15, 1.2016759392543819e-15, 1.2135560818666897e-15, 1.2261054417450561e-15, 1.2394179789163251e-15, 1.2536093926602567e-15, 1.2688244814255010e-15, 1.2852479319096109e-15, 1.3031206634689985e-15, 1.3227655770195326e-15, 1.3446300925011171e-15, 1.3693606835128518e-15, 1.3979436672775240e-15, 1.4319989869661328e-15, 1.4744848603597596e-15, 1.5317872741611144e-15, 1.6227698675312968e-15]","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea/Internal/Ziggurat","kind":"module","full_name":"Alea::Internal::Ziggurat","name":"Ziggurat"},"doc":"Tables for normal variates","summary":"<p>Tables for normal variates</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"github.com/nin93/alea/Alea/NaNError","path":"Alea/NaNError.html","kind":"class","full_name":"Alea::NaNError","name":"NaNError","abstract":false,"superclass":{"html_id":"github.com/nin93/alea/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/nin93/alea/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/nin93/alea/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/nin93/alea/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"alea/internal/ierr.cr","line_number":6,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/ierr.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea","kind":"module","full_name":"Alea","name":"Alea"},"doc":"Exception raised when `NaN` is passed as argument.","summary":"<p>Exception raised when <code>NaN</code> is passed as argument.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/nin93/alea/Alea/NoConvergeError","path":"Alea/NoConvergeError.html","kind":"class","full_name":"Alea::NoConvergeError","name":"NoConvergeError","abstract":false,"superclass":{"html_id":"github.com/nin93/alea/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/nin93/alea/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/nin93/alea/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/nin93/alea/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"alea/internal/ierr.cr","line_number":12,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/ierr.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea","kind":"module","full_name":"Alea","name":"Alea"},"doc":"Exception raised when algorithm has not converged within a fixed limit of iterations.","summary":"<p>Exception raised when algorithm has not converged within a fixed limit of iterations.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/nin93/alea/Alea/PRNG","path":"Alea/PRNG.html","kind":"class","full_name":"Alea::PRNG","name":"PRNG","abstract":true,"superclass":{"html_id":"github.com/nin93/alea/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/nin93/alea/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/nin93/alea/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"alea/rand/rgen/prng.cr","line_number":6,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/prng.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/nin93/alea/Alea/XSR128","kind":"class","full_name":"Alea::XSR128","name":"XSR128"},{"html_id":"github.com/nin93/alea/Alea/XSR256","kind":"class","full_name":"Alea::XSR256","name":"XSR256"}],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea","kind":"module","full_name":"Alea","name":"Alea"},"doc":"`PRNG` is a replacement for the default `Random::PCG32` stdlib prng that implements\nthe **xoshiro** algotithms to generate pseudo-random `UInt`s in 64-bits.\nPerformance is comparable, but quality of generated `Float`s is much better.\nInherit this and implement `#next_u`, `#next_f` and `#jump` to build you own generator.","summary":"<p><code><a href=\"../Alea/PRNG.html\">PRNG</a></code> is a replacement for the default <code>Random::PCG32</code> stdlib prng that implements the <strong>xoshiro</strong> algotithms to generate pseudo-random <code>UInt</code>s in 64-bits.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"jump:self-instance-method","html_id":"jump:self-instance-method","name":"jump","doc":"Must perform a jump.","summary":"<p>Must perform a jump.</p>","abstract":true,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/prng.cr#L14","def":{"name":"jump","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":""}},{"id":"next_f:Float64-instance-method","html_id":"next_f:Float64-instance-method","name":"next_f","doc":"Must return an uniform-distributed `Float64` in [0, 1).","summary":"<p>Must return an uniform-distributed <code>Float64</code> in [0, 1).</p>","abstract":true,"args":[],"args_string":" : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/prng.cr#L11","def":{"name":"next_f","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":""}},{"id":"next_u:UInt64-instance-method","html_id":"next_u:UInt64-instance-method","name":"next_u","doc":"Must return an uniform-distributed `UInt64`.","summary":"<p>Must return an uniform-distributed <code>UInt64</code>.</p>","abstract":true,"args":[],"args_string":" : UInt64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/prng.cr#L8","def":{"name":"next_u","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/nin93/alea/Alea/Random","path":"Alea/Random.html","kind":"struct","full_name":"Alea::Random","name":"Random","abstract":false,"superclass":{"html_id":"github.com/nin93/alea/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/nin93/alea/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/nin93/alea/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/nin93/alea/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"alea/rand/rnorm.cr","line_number":5,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rnorm.cr"},{"filename":"alea/rand/rexp.cr","line_number":5,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rexp.cr"},{"filename":"alea/rand/rgamma.cr","line_number":6,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgamma.cr"},{"filename":"alea/rand/rbeta.cr","line_number":4,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rbeta.cr"},{"filename":"alea/rand/rchisq.cr","line_number":4,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rchisq.cr"},{"filename":"alea/rand/rinvexp.cr","line_number":4,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rinvexp.cr"},{"filename":"alea/rand/rlaplace.cr","line_number":4,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rlaplace.cr"},{"filename":"alea/rand/rlognor.cr","line_number":5,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rlognor.cr"},{"filename":"alea/rand/rpoiss.cr","line_number":4,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rpoiss.cr"},{"filename":"alea/rand/runif.cr","line_number":2,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/runif.cr"},{"filename":"alea/rand/rwald.cr","line_number":5,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rwald.cr"},{"filename":"alea/rand/random.cr","line_number":27,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/random.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULT","name":"DEFAULT","value":"Alea::XSR128","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea","kind":"module","full_name":"Alea","name":"Alea"},"doc":"`Alea::Random` provides the interface for distribution sampling, using the\n**xoshiro** pseudo random number generators written by Sebastiano Vigna and David Blackman.\n\n```\nseed = 9377\nrandom = Alea::Random.new(seed)\nrandom # => Alea::Random\n```\n\nThe default generator is `Alea::XSR128`, faster than `Alea::XSR256`, but less capable state.\nTo use the 256-bits version call the constructor like this:\n\n```\nseed = 12345\nrandom = Alea::Random.new(seed, Alea::XSR256)\nrandom.prng # => Alea::XSR256\n```\n\nYou can build your own custom PRNG by inheriting `Alea::PRNG` and implementing `#next_u`,\n`#next_f` and `#jump`, as they are needed by every other call (except for `#jump`);\nthen create a new instance of `Alea::Random` passing you class by its name like above.\n\nThe following implementations are taken from **numpy**.","summary":"<p><code><a href=\"../Alea/Random.html\">Alea::Random</a></code> provides the interface for distribution sampling, using the <strong>xoshiro</strong> pseudo random number generators written by Sebastiano Vigna and David Blackman.</p>","class_methods":[],"constructors":[{"id":"new(initstate:UInt64,prng:Alea::PRNG.class=DEFAULT)-class-method","html_id":"new(initstate:UInt64,prng:Alea::PRNG.class=DEFAULT)-class-method","name":"new","doc":"Initializes the PRNG with initial state.","summary":"<p>Initializes the PRNG with initial state.</p>","abstract":false,"args":[{"name":"initstate","doc":null,"default_value":"","external_name":"initstate","restriction":"UInt64"},{"name":"prng","doc":null,"default_value":"DEFAULT","external_name":"prng","restriction":"Alea::PRNG.class"}],"args_string":"(initstate : UInt64, prng : <span class=\"t\">Alea</span><span class=\"t\">::</span><span class=\"t\">PRNG</span>.<span class=\"k\">class</span> = <span class=\"t\">DEFAULT</span>)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/random.cr#L34","def":{"name":"new","args":[{"name":"initstate","doc":null,"default_value":"","external_name":"initstate","restriction":"UInt64"},{"name":"prng","doc":null,"default_value":"DEFAULT","external_name":"prng","restriction":"Alea::PRNG.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(initstate, prng)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(prng:Alea::PRNG.class=DEFAULT)-class-method","html_id":"new(prng:Alea::PRNG.class=DEFAULT)-class-method","name":"new","doc":"Initializes the PRNG with initial state readed from system resorces.","summary":"<p>Initializes the PRNG with initial state readed from system resorces.</p>","abstract":false,"args":[{"name":"prng","doc":null,"default_value":"DEFAULT","external_name":"prng","restriction":"Alea::PRNG.class"}],"args_string":"(prng : <span class=\"t\">Alea</span><span class=\"t\">::</span><span class=\"t\">PRNG</span>.<span class=\"k\">class</span> = <span class=\"t\">DEFAULT</span>)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/random.cr#L39","def":{"name":"new","args":[{"name":"prng","doc":null,"default_value":"DEFAULT","external_name":"prng","restriction":"Alea::PRNG.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(prng)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"beta(*,a,b)-instance-method","html_id":"beta(*,a,b)-instance-method","name":"beta","doc":"Generate a *beta-distributed*, pseudo-random `Float64` in range `[0, 1)`.\n\n**@note**: named arguments are mandatory to prevent ambiguity.\n\n**@parameters**:\n* `a`: shape parameter of the distribution;\n  usually mentioned as **`α`**.\n* `b`: shape parameter of the distribution;\n  usually mentioned as **`β`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if any of `a` or `b` is negative or zero.","summary":"<p>Generate a <em>beta-distributed</em>, pseudo-random <code>Float64</code> in range <code>[0, 1)</code>.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":""}],"args_string":"(*, a, b)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rbeta.cr#L19","def":{"name":"beta","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Alea.sanity_check(a, :a, :beta)\nAlea.sanity_check(b, :b, :beta)\nAlea.param_check(a, :<=, 0.0, :a, :beta)\nAlea.param_check(b, :<=, 0.0, :b, :beta)\nnext_beta(a: a, b: b)\n"}},{"id":"chisq(df)-instance-method","html_id":"chisq(df)-instance-method","name":"chisq","doc":"Generate a *chi-square-distributed*, pseudo-random `Float64`.\n\n**@parameters**:\n* `df`: degrees of freedom of the distribution;\n  usually mentioned as **`k`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `df` is negative or zero.","summary":"<p>Generate a <em>chi-square-distributed</em>, pseudo-random <code>Float64</code>.</p>","abstract":false,"args":[{"name":"df","doc":null,"default_value":"","external_name":"df","restriction":""}],"args_string":"(df)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rchisq.cr#L15","def":{"name":"chisq","args":[{"name":"df","doc":null,"default_value":"","external_name":"df","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Alea.sanity_check(df, :df, :chisq)\nAlea.param_check(df, :<=, 0.0, :df, :chisq)\nnext_chisq(df)\n"}},{"id":"exp(scale=1.0)-instance-method","html_id":"exp(scale=1.0)-instance-method","name":"exp","doc":"Generate a *exp-distributed*, pseudo-random `Float64`.\n\n**@parameters**:\n* `scale`: scale parameter of the distribution;\n  usually mentioned as **`λ^-1`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `scale` is negative or zero.","summary":"<p>Generate a <em>exp-distributed</em>, pseudo-random <code>Float64</code>.</p>","abstract":false,"args":[{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":""}],"args_string":"(scale = <span class=\"n\">1.0</span>)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rexp.cr#L16","def":{"name":"exp","args":[{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Alea.sanity_check(scale, :scale, :exp)\nAlea.param_check(scale, :<=, 0.0, :scale, :exp)\nnext_exp(scale)\n"}},{"id":"float:Float64-instance-method","html_id":"float:Float64-instance-method","name":"float","doc":"Generate a *uniform-distributed*, pseudo-random `Float64` in range `[0.0, 1.0)`.\n\n**@references**: `#next_f`.","summary":"<p>Generate a <em>uniform-distributed</em>, pseudo-random <code>Float64</code> in range <code>[0.0, 1.0)</code>.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/runif.cr#L77","def":{"name":"float","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@prng.next_f"}},{"id":"float(range:Range(Float,Float)):Float64-instance-method","html_id":"float(range:Range(Float,Float)):Float64-instance-method","name":"float","doc":"Generate a *uniform-distributed*, pseudo-random `Float64` in fixed range.\n\n**@parameters**:\n* `range`: range parameter, inclusive or exclusive, of the distribution:\n* `range.begin`: left bound parameter of range of the distribution;\n  usually mentioned as **`a`**.\n* `range.end`: right bound parameter of range of the distribution;\n  usually mentioned as **`b`**.\n\n**@notes**:\n* *inclusive* means `[range.begin, range.end]`.\n* *exclusive* means `[range.begin, range.end)`.\n* see `Range` from Crystal stdlib.\n\n**@examples**:\n```\nrange_in = 10.0..9377.0\nrange_in # Range(Float64, Float64), end-inclusive\n\nrange_ex = 10.0...9377.0\nrange_ex # Range(Float64, Float64), end-exclusive\n\nrandom = Alea::Random.new\nrandom.float(range_in) # => 9113.861259040154\nrandom.float(range_ex) # => 7701.2778313581175\n```\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments bound is `NaN`.\n* `Alea::InfinityError` if any of the arguments bound is `Infinity`.\n* `Alea::UndefinedError` if `range.end` is less than `range.begin`.\n* `Alea::UndefinedError` if `range` is not end-inclusive but bounds are the same.","summary":"<p>Generate a <em>uniform-distributed</em>, pseudo-random <code>Float64</code> in fixed range.</p>","abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Float, Float)"}],"args_string":"(range : Range(Float, Float)) : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/runif.cr#L129","def":{"name":"float","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Float, Float)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Alea.sanity_check(range.begin, :\"range.begin\", :float)\nAlea.sanity_check(range.end, :\"range.end\", :float)\nif range.begin <= range.end\nelse\n  raise(Alea::UndefinedError.new(\"Invalid value for `float': range = #{range}\"))\nend\nspan = range.end - range.begin\nif range.excludes_end?\n  if range.end == range.begin\n    raise(Alea::UndefinedError.new(\"Invalid value for `float': range = #{range}\"))\n  end\nend\n(@prng.next_f * span) + range.begin\n"}},{"id":"float(max:Float):Float64-instance-method","html_id":"float(max:Float):Float64-instance-method","name":"float","doc":"Generate a *uniform-distributed*, pseudo-random `Float64` in range `[0.0, max)`.\n\n**@parameters**:\n* `max`: right bound parameter of range of the distribution;\n  usually mentioned as **`b`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `max` is negative or zero.","summary":"<p>Generate a <em>uniform-distributed</em>, pseudo-random <code>Float64</code> in range <code>[0.0, max)</code>.</p>","abstract":false,"args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Float"}],"args_string":"(max : Float) : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/runif.cr#L91","def":{"name":"float","args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Alea.sanity_check(max, :max, :float)\nAlea.param_check(max, :<=, 0.0, :max, :float)\n@prng.next_f * max\n"}},{"id":"gamma(shape,scale=1.0)-instance-method","html_id":"gamma(shape,scale=1.0)-instance-method","name":"gamma","doc":"Generate a *gamma-distributed*, pseudo-random `Float64`.\n\n**@parameters**:\n* `shape`: shape parameter of the distribution;\n  usually mentioned as **`k`**.\n* `scale`: scale parameter of the distribution;\n  usually mentioned as **`θ`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if any of `shape` or `scale` is negative or zero.","summary":"<p>Generate a <em>gamma-distributed</em>, pseudo-random <code>Float64</code>.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":""}],"args_string":"(shape, scale = <span class=\"n\">1.0</span>)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgamma.cr#L19","def":{"name":"gamma","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Alea.sanity_check(shape, :shape, :gamma)\nAlea.sanity_check(scale, :scale, :gamma)\nAlea.param_check(shape, :<=, 0.0, :shape, :gamma)\nAlea.param_check(scale, :<=, 0.0, :scale, :gamma)\nnext_gamma(shape, scale)\n"}},{"id":"invexp(scale=1.0)-instance-method","html_id":"invexp(scale=1.0)-instance-method","name":"invexp","doc":"Generate a *inverse-exp-distributed*, pseudo-random `Float64`.\n\n**@parameters**:\n* `scale`: scale parameter of the distribution;\n  usually mentioned as **`λ^-1`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `scale` is negative or zero.","summary":"<p>Generate a <em>inverse-exp-distributed</em>, pseudo-random <code>Float64</code>.</p>","abstract":false,"args":[{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":""}],"args_string":"(scale = <span class=\"n\">1.0</span>)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rinvexp.cr#L15","def":{"name":"invexp","args":[{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Alea.sanity_check(scale, :scale, :inv_exp)\nAlea.param_check(scale, :<=, 0.0, :scale, :inv_exp)\nnext_inv_exp(scale)\n"}},{"id":"jump:self-instance-method","html_id":"jump:self-instance-method","name":"jump","doc":"This equals to 2^(STATE_STORAGE * 32) calls to `#next_u` or `#next_f`.","summary":"<p>This equals to 2^(STATE_STORAGE * 32) calls to <code><a href=\"../Alea/Random.html#next_u:UInt64-instance-method\">#next_u</a></code> or <code><a href=\"../Alea/Random.html#next_f:Float64-instance-method\">#next_f</a></code>.</p>","abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/random.cr#L54","def":{"name":"jump","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"@prng.jump"}},{"id":"laplace(loc=0.0,scale=1.0)-instance-method","html_id":"laplace(loc=0.0,scale=1.0)-instance-method","name":"laplace","doc":"Generate a *laplace-distributed*, pseudo-random `Float64`.\n\n**@parameters**:\n* `loc`: centrality parameter, or mean of the distribution;\n  usually mentioned as **`μ`**.\n* `scale`: scale parameter of the distribution;\n  usually mentioned as **`b`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `scale` is negative or zero.","summary":"<p>Generate a <em>laplace-distributed</em>, pseudo-random <code>Float64</code>.</p>","abstract":false,"args":[{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":""},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":""}],"args_string":"(loc = <span class=\"n\">0.0</span>, scale = <span class=\"n\">1.0</span>)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rlaplace.cr#L17","def":{"name":"laplace","args":[{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":""},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Alea.sanity_check(loc, :loc, :laplace)\nAlea.sanity_check(scale, :scale, :laplace)\nAlea.param_check(scale, :<=, 0.0, :scale, :laplace)\nnext_laplace(loc, scale)\n"}},{"id":"lognormal(loc=0.0,sigma=1.0)-instance-method","html_id":"lognormal(loc=0.0,sigma=1.0)-instance-method","name":"lognormal","doc":"Generate a *log-normal-distributed*, pseudo-random `Float64`.\n\n**@parameters**:\n* `loc`: centrality parameter, or mean of the underlying normal distribution;\n  usually mentioned as **`μ`**.\n* `sigma`: scale parameter, or standard deviation of the underlying normal distribution;\n  usually mentioned as **`σ`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `sigma` is negative or zero.","summary":"<p>Generate a <em>log-normal-distributed</em>, pseudo-random <code>Float64</code>.</p>","abstract":false,"args":[{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":""},{"name":"sigma","doc":null,"default_value":"1.0","external_name":"sigma","restriction":""}],"args_string":"(loc = <span class=\"n\">0.0</span>, sigma = <span class=\"n\">1.0</span>)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rlognor.cr#L18","def":{"name":"lognormal","args":[{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":""},{"name":"sigma","doc":null,"default_value":"1.0","external_name":"sigma","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Alea.sanity_check(loc, :loc, :lognormal)\nAlea.sanity_check(sigma, :sigma, :lognormal)\nAlea.param_check(sigma, :<=, 0.0, :sigma, :lognormal)\nnext_lognormal(loc, sigma)\n"}},{"id":"next_f:Float64-instance-method","html_id":"next_f:Float64-instance-method","name":"next_f","doc":"Returns the next generated `Float64`.","summary":"<p>Returns the next generated <code>Float64</code>.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/random.cr#L49","def":{"name":"next_f","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@prng.next_f"}},{"id":"next_u:UInt64-instance-method","html_id":"next_u:UInt64-instance-method","name":"next_u","doc":"Returns the next generated `UInt64`.","summary":"<p>Returns the next generated <code>UInt64</code>.</p>","abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/random.cr#L44","def":{"name":"next_u","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"@prng.next_u"}},{"id":"normal(loc=0.0,sigma=1.0)-instance-method","html_id":"normal(loc=0.0,sigma=1.0)-instance-method","name":"normal","doc":"Generate a *normal-distributed*, pseudo-random `Float64`.\n\n**@parameters**:\n* `loc`: centrality parameter, or mean of the distribution;\n  usually mentioned as **`μ`**.\n* `sigma`: scale parameter, or standard deviation of the distribution;\n  usually mentioned as **`σ`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `sigma` is negative or zero.","summary":"<p>Generate a <em>normal-distributed</em>, pseudo-random <code>Float64</code>.</p>","abstract":false,"args":[{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":""},{"name":"sigma","doc":null,"default_value":"1.0","external_name":"sigma","restriction":""}],"args_string":"(loc = <span class=\"n\">0.0</span>, sigma = <span class=\"n\">1.0</span>)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rnorm.cr#L18","def":{"name":"normal","args":[{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":""},{"name":"sigma","doc":null,"default_value":"1.0","external_name":"sigma","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Alea.sanity_check(loc, :loc, :normal)\nAlea.sanity_check(sigma, :sigma, :normal)\nAlea.param_check(sigma, :<=, 0.0, :sigma, :normal)\nnext_normal(loc, sigma)\n"}},{"id":"poisson(lam=1.0)-instance-method","html_id":"poisson(lam=1.0)-instance-method","name":"poisson","doc":"Generate a *poisson-distributed*, pseudo-random `Int64`.\n\n**@parameters**:\n* `lam`: separation parameter of the distribution;\n  usually mentioned as **`λ`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if `lam` is negative or zero.","summary":"<p>Generate a <em>poisson-distributed</em>, pseudo-random <code>Int64</code>.</p>","abstract":false,"args":[{"name":"lam","doc":null,"default_value":"1.0","external_name":"lam","restriction":""}],"args_string":"(lam = <span class=\"n\">1.0</span>)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rpoiss.cr#L15","def":{"name":"poisson","args":[{"name":"lam","doc":null,"default_value":"1.0","external_name":"lam","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Alea.sanity_check(lam, :lam, :poisson)\nAlea.param_check(lam, :<=, 0.0, :lam, :poisson)\nnext_poisson(lam)\n"}},{"id":"prng:Alea::PRNG-instance-method","html_id":"prng:Alea::PRNG-instance-method","name":"prng","doc":"The PRNG in use by this struct.","summary":"<p>The PRNG in use by this struct.</p>","abstract":false,"args":[],"args_string":" : Alea::PRNG","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/random.cr#L31","def":{"name":"prng","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Alea::PRNG","visibility":"Public","body":"@prng"}},{"id":"uint:UInt64-instance-method","html_id":"uint:UInt64-instance-method","name":"uint","doc":"Generate a *uniform-distributed*, pseudo-random `UInt64`.\n\n**@references**: `#next_u`.","summary":"<p>Generate a <em>uniform-distributed</em>, pseudo-random <code>UInt64</code>.</p>","abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/runif.cr#L6","def":{"name":"uint","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"@prng.next_u"}},{"id":"uint(max:Int):UInt64-instance-method","html_id":"uint(max:Int):UInt64-instance-method","name":"uint","doc":"Generate a *uniform-distributed*, pseudo-random `UInt64` in range `[0, max)`.\n\n**@parameters**:\n* `max`: right bound parameter of range of the distribution;\n  usually mentioned as **`b`**.\n\n**@exceptions**:\n* `Alea::UndefinedError` if `max` is negative or zero.","summary":"<p>Generate a <em>uniform-distributed</em>, pseudo-random <code>UInt64</code> in range <code>[0, max)</code>.</p>","abstract":false,"args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Int"}],"args_string":"(max : Int) : UInt64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/runif.cr#L18","def":{"name":"uint","args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"Alea.param_check(max, :<=, 0, :max, :uint)\n(max == UInt64::MAX) && (return @prng.next_u)\nlim = UInt64::MAX - (UInt64::MAX % max)\nwhile true\n  u = @prng.next_u\n  u < lim && (return u % max)\nend\n"}},{"id":"uint(range:Range(Int,Int)):UInt64-instance-method","html_id":"uint(range:Range(Int,Int)):UInt64-instance-method","name":"uint","doc":"Generate a *uniform-distributed*, pseudo-random `UInt64` in fixed range.\n\n**@parameters**:\n* `range`: range parameter, inclusive or exclusive, of the distribution:\n* `range.begin`: left bound parameter of range of the distribution;\n  usually mentioned as **`a`**.\n* `range.end`: right bound parameter of range of the distribution;\n  usually mentioned as **`b`**.\n\n# **@notes**:\n* *inclusive* means `[range.begin, range.end]`.\n* *exclusive* means `[range.begin, range.end)`.\n* see `Range` from Crystal stdlib.\n\n**@examples**:\n```\nrange_in = 10..9377\nrange_in # Range(Int32, Int32), end-inclusive\n\nrange_ex = 10...9377\nrange_ex # Range(Int32, Int32), end-exclusive\n\nrandom = Alea::Random.new\nrandom.uint(range_in) # => 2640\nrandom.uint(range_ex) # => 527\n```\n\n**@exceptions**:\n* `Alea::UndefinedError` if `range.end` is less than `range.begin`.\n* `Alea::UndefinedError` if `range` is not end-inclusive but bounds are the same.","summary":"<p>Generate a <em>uniform-distributed</em>, pseudo-random <code>UInt64</code> in fixed range.</p>","abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"args_string":"(range : Range(Int, Int)) : UInt64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/runif.cr#L59","def":{"name":"uint","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"if 0 <= (__temp_34 = range.begin) && __temp_34 <= range.end\nelse\n  raise(Alea::UndefinedError.new(\"Invalid value for `uint': range = #{range}\"))\nend\nspan = range.end - range.begin\nif range.excludes_end?\n  if range.end == range.begin\n    raise(Alea::UndefinedError.new(\"Invalid value for `uint': range = #{range}\"))\n  end\nelse\n  span = span + 1\nend\n(uint(span)) + range.begin\n"}},{"id":"wald(loc,shape=1.0)-instance-method","html_id":"wald(loc,shape=1.0)-instance-method","name":"wald","doc":"Generate a *wald-distributed*, pseudo-random `Float64`.\n\n**@note**: the Wald distribution is also known as Inverse Normal distribution.\n\n**@parameters**:\n* `loc`: centrality parameter, or mean of the distribution;\n  usually mentioned as **`μ`**.\n* `shape`: shape parameter of the distribution;\n  usually mentioned as **`λ`**.\n\n**@exceptions**:\n* `Alea::NaNError` if any of the arguments is `NaN`.\n* `Alea::InfinityError` if any of the arguments is `Infinity`.\n* `Alea::UndefinedError` if any of `loc` or `shape` is negative or zero.","summary":"<p>Generate a <em>wald-distributed</em>, pseudo-random <code>Float64</code>.</p>","abstract":false,"args":[{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":""},{"name":"shape","doc":null,"default_value":"1.0","external_name":"shape","restriction":""}],"args_string":"(loc, shape = <span class=\"n\">1.0</span>)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rwald.cr#L20","def":{"name":"wald","args":[{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":""},{"name":"shape","doc":null,"default_value":"1.0","external_name":"shape","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Alea.sanity_check(loc, :loc, :wald)\nAlea.sanity_check(shape, :shape, :wald)\nAlea.param_check(loc, :<=, 0.0, :loc, :wald)\nAlea.param_check(shape, :<=, 0.0, :shape, :wald)\nnext_wald(loc, shape)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/nin93/alea/Alea/UndefinedError","path":"Alea/UndefinedError.html","kind":"class","full_name":"Alea::UndefinedError","name":"UndefinedError","abstract":false,"superclass":{"html_id":"github.com/nin93/alea/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/nin93/alea/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/nin93/alea/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/nin93/alea/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"alea/internal/ierr.cr","line_number":3,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/internal/ierr.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea","kind":"module","full_name":"Alea","name":"Alea"},"doc":"Exception raised when distribution conditions are not met.","summary":"<p>Exception raised when distribution conditions are not met.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/nin93/alea/Alea/XSR128","path":"Alea/XSR128.html","kind":"class","full_name":"Alea::XSR128","name":"XSR128","abstract":false,"superclass":{"html_id":"github.com/nin93/alea/Alea/PRNG","kind":"class","full_name":"Alea::PRNG","name":"PRNG"},"ancestors":[{"html_id":"github.com/nin93/alea/Alea/PRNG","kind":"class","full_name":"Alea::PRNG","name":"PRNG"},{"html_id":"github.com/nin93/alea/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/nin93/alea/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"alea/rand/rgen/xsr.cr","line_number":13,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"STATE_STORAGE","name":"STATE_STORAGE","value":"2","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea","kind":"module","full_name":"Alea","name":"Alea"},"doc":"`Alea::XSR128` is the default pseudo-random number generator, with a state of 128 bits, and therefore\na period of 2^64 -1. It is as fast as `Random::PCG32`, but yielding a 64-bit unsigned integer.\nIf more state is needed, check `Alea::XSR256`.\n\n```text\n - period:     2^128 -1\n - state type: UInt64\n```","summary":"<p><code><a href=\"../Alea/XSR128.html\">Alea::XSR128</a></code> is the default pseudo-random number generator, with a state of 128 bits, and therefore a period of 2^64 -1.</p>","class_methods":[],"constructors":[{"id":"new(initstate:UInt64)-class-method","html_id":"new(initstate:UInt64)-class-method","name":"new","doc":"Initializes the PRNG with initial state.","summary":"<p>Initializes the PRNG with initial state.</p>","abstract":false,"args":[{"name":"initstate","doc":null,"default_value":"","external_name":"initstate","restriction":"UInt64"}],"args_string":"(initstate : UInt64)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr#L20","def":{"name":"new","args":[{"name":"initstate","doc":null,"default_value":"","external_name":"initstate","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(initstate)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Initializes the PRNG with initial state readed from system resorces.","summary":"<p>Initializes the PRNG with initial state readed from system resorces.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr#L26","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(::Random::Secure.next_u.to_u64)"}}],"instance_methods":[{"id":"jump:self-instance-method","html_id":"jump:self-instance-method","name":"jump","doc":"TODO:","summary":"<p><span class=\"flag orange\">TODO</span> </p>","abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr#L60","def":{"name":"jump","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"raise(NotImplementedError.new)\nself\n"}},{"id":"next_f:Float64-instance-method","html_id":"next_f:Float64-instance-method","name":"next_f","doc":"Generate a uniformly-distributed random `Float64` in [0, 1).\n\n```\nrng = Alea::XSR128.new\nrng.next_f # => 0.12194680409000741\n```","summary":"<p>Generate a uniformly-distributed random <code>Float64</code> in [0, 1).</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr#L54","def":{"name":"next_f","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(next_u >> 11) * 1.1102230246251565e-16"}},{"id":"next_u:UInt64-instance-method","html_id":"next_u:UInt64-instance-method","name":"next_u","doc":"Generate a uniformly-distributed random `UInt64`.\n\n```\nrng = Alea::XSR128.new\nrng.next_u # => 9136120204379184874\n```","summary":"<p>Generate a uniformly-distributed random <code>UInt64</code>.</p>","abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr#L37","def":{"name":"next_u","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"tp0 = @state[0]\ntp1 = @state[1]\nrnd = (rotate(tp0 &+ tp1, 17)) &+ tp0\ntp1 = tp1 ^ tp0\n@state[0] = ((rotate(tp0, 49)) ^ tp1) ^ (tp1 << 21)\n@state[1] = rotate(tp1, 28)\nrnd\n"}}],"macros":[],"types":[]},{"html_id":"github.com/nin93/alea/Alea/XSR256","path":"Alea/XSR256.html","kind":"class","full_name":"Alea::XSR256","name":"XSR256","abstract":false,"superclass":{"html_id":"github.com/nin93/alea/Alea/PRNG","kind":"class","full_name":"Alea::PRNG","name":"PRNG"},"ancestors":[{"html_id":"github.com/nin93/alea/Alea/PRNG","kind":"class","full_name":"Alea::PRNG","name":"PRNG"},{"html_id":"github.com/nin93/alea/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/nin93/alea/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"alea/rand/rgen/xsr.cr","line_number":73,"url":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr"}],"repository_name":"github.com/nin93/alea","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"JUMP","name":"JUMP","value":"StaticArray[1733541517147835066_u64, 15395012609548302636_u64, 12202545078643706282_u64, 4155657270789760540_u64]","doc":null,"summary":null},{"id":"STATE_STORAGE","name":"STATE_STORAGE","value":"4","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/nin93/alea/Alea","kind":"module","full_name":"Alea","name":"Alea"},"doc":"`Alea::XSR256` is the alternative PRNG loaded with 256 bits of state.\nAs a result of this, double steps are needed and therefore performance is affected.\n\n```text\n - period:     2^256 -1\n - state type: UInt64\n```","summary":"<p><code><a href=\"../Alea/XSR256.html\">Alea::XSR256</a></code> is the alternative PRNG loaded with 256 bits of state.</p>","class_methods":[],"constructors":[{"id":"new(initstate:UInt64)-class-method","html_id":"new(initstate:UInt64)-class-method","name":"new","doc":"Initializes the PRNG with initial state.","summary":"<p>Initializes the PRNG with initial state.</p>","abstract":false,"args":[{"name":"initstate","doc":null,"default_value":"","external_name":"initstate","restriction":"UInt64"}],"args_string":"(initstate : UInt64)","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr#L85","def":{"name":"new","args":[{"name":"initstate","doc":null,"default_value":"","external_name":"initstate","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(initstate)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Initializes the PRNG with initial state readed from system resorces.","summary":"<p>Initializes the PRNG with initial state readed from system resorces.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr#L91","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(::Random::Secure.next_u.to_u64)"}}],"instance_methods":[{"id":"jump:self-instance-method","html_id":"jump:self-instance-method","name":"jump","doc":"TODO:","summary":"<p><span class=\"flag orange\">TODO</span> </p>","abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr#L123","def":{"name":"jump","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"raise(NotImplementedError.new)\nself\n"}},{"id":"next_f:Float64-instance-method","html_id":"next_f:Float64-instance-method","name":"next_f","doc":"Generate a uniformly-distributed random `Float64` in [0, 1).\n\n```\nrng = Alea::XSR256.new\nrng.next_f # => 0.12194680409000741\n```","summary":"<p>Generate a uniformly-distributed random <code>Float64</code> in [0, 1).</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr#L115","def":{"name":"next_f","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"rnd = @state[0] &+ @state[3]\nxsr_new_state\n(rnd >> 11) * 1.1102230246251565e-16\n"}},{"id":"next_u:UInt64-instance-method","html_id":"next_u:UInt64-instance-method","name":"next_u","doc":"Generate a uniformly-distributed random `UInt64`.\n\n```\nrng = Alea::XSR256.new\nrng.next_u # => 9136120204379184874\n```","summary":"<p>Generate a uniformly-distributed random <code>UInt64</code>.</p>","abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/nin93/alea/blob/de6af4e2a2a295379b259c493e2f4488c27e1bfe/src/alea/rand/rgen/xsr.cr#L102","def":{"name":"next_u","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"rnd = (rotate(@state[0] &+ @state[3], 23)) &+ @state[0]\nxsr_new_state\nrnd\n"}}],"macros":[],"types":[]}]}]}}